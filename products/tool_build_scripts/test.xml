<?xml version="1.0"?>
<project name="testsuite" default="run" basedir="." xmlns:jacoco="antlib:org.jacoco.ant">
	<!--
  This file generic testing script.
  It requires:
	eclipse-home = pointing to the home of eclipse installation that contains plugins with test
	
	org.eclipse.test = contains the current version of org.eclipse.test plugin
			or
	library-file and junit-stylesheet = the full path of library.xml and junit stylesheet files
	
	plugin-name = the name of the plugin under test
	class-tests = the name of the class under test
-->
	<!--
  <property name="plugin-name" value="test1_tests"/>
  <property name="class-tests" value="test1.Test1Test"/>
  <property name="plugin-path" value="${eclipse-home}/plugins/${plugin-name}_${plugin_version}"/>
-->
	
	<!-- Set ${DSTAMP} and ${TSTAMP} -->
	<tstamp/>

	<property name="eclipse-home" value="${basedir}/../.." />
	<property name="library-file" value="${eclipse-home}/plugins/org.eclipse.test_${org.eclipse.test}/library.xml" />
	<property name="sbot-library-file" value="${eclipse-home}/plugins/${swtbot.headles.plugin}/library.xml" />
	<property name="junit-stylesheet" value="${eclipse-home}/plugins/org.eclipse.test_${org.eclipse.test}/JUNIT.XSL" />
	
	<dirname property="current.ant.file.basedir" file="${ant.file}"/>
	<property name="jacoco_to_emma.xslt" value="${current.ant.file.basedir}/jacoco_to_emma.xslt" />

	<property name="coverage-output" value="${eclipse-home}/coverage" />
	<taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
		<classpath path="${eclipse-home}/plugins/org.eclipse.test_${org.eclipse.test}/lib/jacocoant.jar" />
	</taskdef>
	
	<property name="saxon9he.jar_fullpath" value="${current.ant.file.basedir}/saxon9he.jar"/>
	<property name="report.dtd_fullpath" value="${current.ant.file.basedir}/report.dtd"/>

	<!-- Coverage -->
	<target name="coverage">

		<!-- exec -->
		<jacoco:merge destfile="${coverage-output}/merged.exec">
			<fileset dir="${coverage-output}" includes="*.exec" excludes="merged.exec"/>
		</jacoco:merge>

		<fileset id="code_jars" dir="${eclipse-home}/plugins">
			<include name="com.eu.evidence.*.jar"/>
			<include name="com.eu.evidence.*/*.jar"/>
			<include name="com.eu.evidence.*/**/*.class"/>
			<exclude name="com.eu.evidence.*test*/**/*"/>
		</fileset>
		
		<fileset id="test_jars" dir="${eclipse-home}/plugins">
			<include name="com.eu.evidence.rtdruid.*test*.jar"/>
			<include name="com.eu.evidence.rtdruid.*test*/**/*.class"/>
		</fileset>

		<pathconvert pathsep="&#xA;" property="sounds1" refid="code_jars">
			 <map from="${eclipse-home}" to="."/>
		</pathconvert>
		<echo>--- CODE ${eclipse-home} ---</echo>
		<echo>${sounds1}</echo>
		
		<pathconvert pathsep="&#xA;" property="sounds2" refid="test_jars">
			 <map from="${eclipse-home}" to=""/>
		</pathconvert>		
		<echo>--- TEST ---</echo>
		<echo>${sounds2}</echo>

		<!-- rtdruid sources 
		<fileset dir="${src.path}" id="code_src" >
			<include name="**/*.java"/>
		</fileset>
		<pathconvert pathsep="&#xA;" property="sounds3" refid="code_src">
			 <map from="${src.path}" to=""/>
		</pathconvert>		
		<echo>- - - SOURCE - - -</echo>
		<echo>${sounds3}</echo>
		-->

		<jacoco:report>

			<executiondata>
				<file file="${coverage-output}/merged.exec" />
			</executiondata>

			<structure name="Example Project">
				<group name="Code">
					<classfiles>
						<fileset refid="code_jars"/>
					</classfiles>
				</group>
				
				<!--
				<group name="Test">
					<classfiles>
						<fileset refid="test_jars"/>
					</classfiles>
				</group>
-->
				
<!--			<sourcefiles encoding="UTF-8">
					<fileset refid="code_src" />
					<fileset dir="${src.path}/core/plugin_rtd_core/src/public"/>
					<fileset dir="${src.path}/core/plugin_rtd_core/src/internal"/>
					<fileset dir="${src.path}/core/plugin_rtd_core/src/e_model"/>
					<fileset dir="${src.path}/core/plugin_rtd_core/src/e_edit"/>
				</sourcefiles>-->
			</structure>

			<html destdir="${coverage-output}/html_report" />
			<xml destfile="${coverage-output}/xml_report.xml" />
			
		</jacoco:report>
		
	</target>
	<target name="emma_coverage">

		<echo>--- JaCoCo to Emma --- </echo>
		<copy file="${report.dtd_fullpath}" todir="${coverage-output}"/>
		<xslt style="${jacoco_to_emma.xslt}" in="${coverage-output}/xml_report.xml" out="${coverage-output}/emma_coverage.xml" >
		  <!-- saxon or some other xslt2/xpath2 processor is required -->
		  <classpath>
		     <pathelement location="${saxon9he.jar_fullpath}"/>
		  </classpath>
		</xslt>
	</target>


	<!-- This target holds all initialization code that needs to be done for -->
	<!-- all tests that are to be run. Initialization for individual tests -->
	<!-- should be done within the body of the suite target. -->
	<target name="init">
		<tstamp />
		<delete>
			<fileset dir="${eclipse-home}" includes="org*.xml" />
		</delete>
	</target>

	<!-- This target defines the tests that need to be run. -->
	<target name="suite" unless="performance">
		<property name="data" value="${eclipse-home}/test-workspace" />
		<property name="jvmOption" value="" />
		<property name="vmAgent" value="-javaagent:${eclipse-home}/plugins/org.eclipse.test_${org.eclipse.test}/lib/jacocoagent.jar=destfile=${coverage-output}/jacoco_${class-tests}${DSTAMP}_${TSTAMP}.exec"/>
		<!--<delete dir="${location1}" quiet="true"/> -->
		<ant target="core-test" antfile="${library-file}" dir="${eclipse-home}">
			<property name="data-dir" value="${data}" />
			<property name="plugin-name" value="${plugin-name}" />
			<property name="classname" value="${class-tests}" />
			<property name="vmargs" value=" -Xms512M -Xmx1024M -XX:MaxPermSize=512M ${jvmOption} ${vmAgent}" />
		</ant>
	</target>
	
	<!-- This target defines the tests that need to be run. -->
	<target name="sbot_suite" unless="performance">
		<property name="data" value="${eclipse-home}/test-workspace" />
		<property name="jvmOption" value="" />
		<property name="vmAgent" value="-javaagent:${eclipse-home}/plugins/org.eclipse.test_${org.eclipse.test}/lib/jacocoagent.jar=destfile=${coverage-output}/jacoco_swtbot_${class-tests}${DSTAMP}_${TSTAMP}.exec"/>
		<!--<delete dir="${location1}" quiet="true"/> -->
		<ant target="swtbot-test" antfile="${sbot-library-file}" dir="${eclipse-home}">
			<property name="data-dir" value="${data}" />
			<property name="plugin-name" value="${plugin-name}" />
			<property name="classname" value="${class-tests}" />
			<property name="vmargs" value=" -Xms512M -Xmx1024M -XX:MaxPermSize=512M ${jvmOption} ${vmAgent}" />
		</ant>
	</target>
		

	<!-- This target holds code to cleanup the testing environment after the tests -->
	<!-- have been run. You can use this to delete temporary files that are created. -->
	<target name="cleanup">
	</target>

	<!--  This target defines the performance tests that need to be run. 
  <target name="performance-suite">
    <property name="swt-performance-folder" value="${eclipse-home}/swt_performance_folder" /> 
    <delete dir="${swt-performance-folder}" quiet="true" /> 
    <ant target="core-test" antfile="${library-file}" dir="${eclipse-home}">
      <property name="timeout" value="14400000"/>
      <property name="data-dir" value="${swt-performance-folder}" /> 
      <property name="plugin-name" value="${plugin-name}" /> 
      <property name="classname" value="org.eclipse.swt.tests.junit.performance.PerformanceTests" /> 
    </ant>
  </target>

  <target name="performance" depends="init,performance-suite,cleanup">
    <ant target="collect" antfile="${library-file}" dir="${eclipse-home}">
      <property name="includes" value="org*.xml" /> 
      <property name="output-file" value="${plugin-name}.xml" /> 
    </ant>
  </target> -->

	<!-- This target runs the test suite. Any actions that need to happen after all -->
	<!-- the tests have been run should go here. -->
	<target name="run" depends="init,suite,cleanup">
		<ant target="collect" antfile="${library-file}" dir="${eclipse-home}">
			<property name="includes" value="org*.xml" />
			<property name="output-file" value="${plugin-name}.xml" />
		</ant>
	</target>
	<target name="run_sbot" depends="init,sbot_suite,cleanup">
		<ant target="collect" antfile="${sbot-library-file}" dir="${eclipse-home}">
			<property name="includes" value="org*.xml" />
			<property name="output-file" value="${plugin-name}.xml" />
		</ant>
	</target>
</project>
