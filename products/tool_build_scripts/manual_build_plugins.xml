<?xml version="1.0" encoding="UTF-8"?>
<project name="common_build_for_plugins">


<!--
******************************************
                 COMMON
******************************************
-->
	
	<target name="sign.jar" if="sign.key.location">
		<signjar 
				jar="${jar.location}"
				alias="${sign.key.alias}"
				keypass="${sign.key.keypass}"
				storepass="${sign.key.storepass}"
				keystore="${sign.key.location}"
				sigfile="EVIDENCEF"
		/>
	</target>

	
	<target name="common_build.update.jar" description="Build the plug-in for an update site.">
<!--		<delete dir="${temp.folder}"/> -->
		<mkdir dir="${temp.folder}"/>
		<mkdir dir="${plugin.destination}"/>
		<antcall target="build.jars"/>
		<antcall target="gather.bin.parts">
			<param name="destination.temp.folder" value="${plugin.temp.folder}/${plugin_id}_${plugin_vers}/"/>
		</antcall>
		<jar destfile="${plugin.destination}/${plugin_id}_${plugin_vers}.jar" basedir="${plugin.temp.folder}/${plugin_id}_${plugin_vers}" filesetmanifest="merge"/>
		<antcall target="sign.jar">
				<param name="jar.location" value="${plugin.destination}/${plugin_id}_${plugin_vers}.jar"/>
		</antcall>

<!--		<delete dir="${temp.folder}"/>-->
	</target>

	
	

	<target name="common_build.jar" description="Create jar.">
<!--		<delete dir="${temp.folder}/rtdruid_core.jar.bin"/>-->
		<mkdir dir="${build.result.folder}/${jar_name}.bin"/>

		<!-- compile the source code -->
		<javac destdir="${build.result.folder}/${jar_name}.bin" 
				failonerror="${javacFailOnError}" 
				verbose="${javacVerbose}" 
				debug="${javacDebugInfo}" 
				includeAntRuntime="no" 
				bootclasspath="${bootclasspath}"
				source="${javacSource}"
				target="${javacTarget}"
				srcdir="${common_build_sources}"
			>

			<compilerarg line="${compilerArg}" compiler="${build.compiler}"/>
			<classpath refid="common_build_classpath" />
			<compilerarg line="-log '${temp.folder}/${jar_name}.bin${logExtension}'" compiler="org.eclipse.jdt.core.JDTCompilerAdapter"/>
		</javac>
		<antcall target="checkCompilationResults"/>
		<!-- Copy necessary resources -->
		<copy todir="${build.result.folder}/${jar_name}.bin" failonerror="true" overwrite="false">
			<resources refid="common_build_binary_files"/>
		</copy>

		<mkdir dir="${plugin.temp.folder}/${plugin_id}_${plugin_vers}"/>
		<jar destfile="${plugin.temp.folder}/${plugin_id}_${plugin_vers}/${jar_name}.jar" basedir="${build.result.folder}/${jar_name}.bin"/>
		<antcall target="sign.jar">
				<param name="jar.location" value="${plugin.temp.folder}/${plugin_id}_${plugin_vers}/${jar_name}.jar"/>
		</antcall>
		
<!--		<delete dir="${temp.folder}/${jar_name}.bin"/>-->
	</target>

	<target name="common_build.dir" description="Create jar.">
<!--		<delete dir="${temp.folder}/rtdruid_core.jar.bin"/>-->
		<mkdir dir="${build.result.folder}/${jar_name}.bin"/>

		<!-- compile the source code -->
		<javac destdir="${build.result.folder}/${jar_name}.bin" 
				failonerror="${javacFailOnError}" 
				verbose="${javacVerbose}" 
				debug="${javacDebugInfo}" 
				includeAntRuntime="no" 
				bootclasspath="${bootclasspath}"
				source="${javacSource}"
				target="${javacTarget}"
				srcdir="${common_build_sources}"
			>

			<compilerarg line="${compilerArg}" compiler="${build.compiler}"/>
			<classpath refid="common_build_classpath" />
			<compilerarg line="-log '${temp.folder}/${jar_name}.bin${logExtension}'" compiler="org.eclipse.jdt.core.JDTCompilerAdapter"/>
		</javac>
		<antcall target="checkCompilationResults"/>
		<!-- Copy necessary resources -->
		<copy todir="${build.result.folder}/${jar_name}.bin" failonerror="true" overwrite="false">
			<resources refid="common_build_binary_files"/>
		</copy>

		<mkdir dir="${plugin.temp.folder}/${plugin_id}_${plugin_vers}"/>
		<copy todir="${plugin.temp.folder}/${plugin_id}_${plugin_vers}">
			<fileset dir="${build.result.folder}/${jar_name}.bin"/>
		</copy>
<!--		<delete dir="${temp.folder}/${jar_name}.bin"/>-->
	</target>

	<target name="common_publish.bin.parts" if="p2.publish.parts" unless="compilation.problem.marker.exists">
		<mkdir dir="${plugin.temp.folder}/${plugin_id}_${plugin_vers}"/>
		<copy todir="${plugin.temp.folder}/${plugin_id}_${plugin_vers}" failonerror="true" overwrite="true" >
			<fileset dir="${basedir}">
				<include name="META-INF/MANIFEST.MF"/>
				<include name="plugin.xml"/>
				<include name="fragment.xml"/>
			</fileset>
		</copy>
		<eclipse.versionReplacer path="${plugin.temp.folder}/${plugin_id}_${plugin_vers}" version="${plugin_vers}"/>
		<antcall target="apitools.generation">
			<param name="target.folder" value="${plugin.temp.folder}/${plugin_id}_${plugin_vers}"/>
			<param name="projectLocation" value="${basedir}"/>
			<param name="binary.folders" value="${plugin.temp.folder}/${plugin_id}_${plugin_vers}/${jar_name}"/>
			<param name="projectName" value="${bundleId}_${bundleVersion}"/>
		</antcall>
		<eclipse.gatherBundle 
		   metadataRepository="${p2.build.repo}"
		   artifactRepository="${p2.build.repo}"
		   buildResultFolder="${plugin.temp.folder}/${plugin_id}_${plugin_vers}"
		   baseDirectory="${basedir}"
		   unpack="false"
		/>
	</target>

	<target name="common_gather.bin.files" if="destination.temp.folder">
		<condition property="subfolder" value="">
			<not><isset property="subfolder"/></not>
		</condition>
		<mkdir dir="${destination.temp.folder}/${subfolder}"/>
		<copy todir="${destination.temp.folder}/${subfolder}" failonerror="true" overwrite="true">
			<fileset refid="common_gather_binary"/>
		</copy>
	</target>
	
	<target name="common_gather.bin.parts" if="destination.temp.folder">
		<mkdir dir="${destination.temp.folder}"/>
		<copy todir="${destination.temp.folder}" failonerror="true" overwrite="true">
			<fileset refid="common_gather_binary"/>
		</copy>
		
		<eclipse.versionReplacer path="${destination.temp.folder}" version="${plugin_vers}"/>
		<antcall target="apitools.generation">
			<param name="target.folder" value="${destination.temp.folder}"/>
			<param name="projectLocation" value="${basedir}"/>
			<param name="binary.folders" value="${destination.temp.folder}/${jar_name}.jar"/>
			<param name="projectName" value="${bundleId}_${bundleVersion}"/>
		</antcall>
	</target>


	<target name="apitools.generation" if="generateAPIDescription">
		<apitooling.apigeneration  projectName="${projectName}" project="${projectLocation}" binary="${binary.folders}" target="${target.folder}"		/>
	</target>
	

	<target name="checkCompilationResults" if="compilation.error.occured">
		<echo file="${compilation.problem.marker}" message="com.eu.evidence.rtdruid.core : compilation.error.occured=${compilation.error.occured}"/>
	</target>

	<target name="clean">
		<!-- default target does nothing -->
	</target>

	<target name="update.ee.files">
		<!-- default target does nothing -->
	</target>

</project>
