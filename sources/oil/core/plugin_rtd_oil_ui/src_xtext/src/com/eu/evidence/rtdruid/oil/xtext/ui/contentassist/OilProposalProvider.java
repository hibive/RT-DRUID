/*
* generated by Xtext
*/
package com.eu.evidence.rtdruid.oil.xtext.ui.contentassist;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.IScopeProvider;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;

import com.eu.evidence.rtdruid.oil.xtext.model.OilObject;
import com.eu.evidence.rtdruid.oil.xtext.model.OilPackage;
import com.eu.evidence.rtdruid.oil.xtext.model.Parameter;
import com.eu.evidence.rtdruid.oil.xtext.model.ParameterType;
import com.eu.evidence.rtdruid.oil.xtext.model.VariantType;
import com.google.inject.Inject;
/**
 * see http://www.eclipse.org/Xtext/documentation/latest/xtext.html#contentAssist on how to customize content assistant
 */
public class OilProposalProvider extends AbstractOilProposalProvider {
	
	@Inject private IScopeProvider scopeProvider;
	
	
	private void fill(Iterable<IEObjectDescription> candidates, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		DefaultProposalCreator  wrappedFactory = new DefaultProposalCreator(context, null, getQualifiedNameConverter());
		for (IEObjectDescription candidate : candidates) {
			if (!acceptor.canAcceptMoreProposals())
				return;
			acceptor.accept(wrappedFactory.apply(candidate));
		}
	}


	public void completeParameter_Type(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		if (model instanceof OilObject) {
			IScope 	scope = scopeProvider.getScope(model, OilPackage.Literals.OIL_OBJECT__PARAMETERS);
			fill(scope.getAllElements(), context, acceptor);
		}
	}
	
	public void completeParameter_ValueRef(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		if (model instanceof Parameter) {
			IScope scope = scopeProvider.getScope(model, OilPackage.Literals.PARAMETER__VALUE_REF);
			fill(scope.getAllElements(), context, acceptor);
		}
	}
	public void completeParameter_Parameters(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		if (model instanceof Parameter) {
			IScope scope = scopeProvider.getScope(model, OilPackage.Literals.PARAMETER__PARAMETERS);
			
			fill(scope.getAllElements(), context, acceptor);
		}
	}

	@Override
	public void completeKeyword(Keyword keyword,
			ContentAssistContext contentAssistContext,
			ICompletionProposalAcceptor acceptor) {
		if ("AUTO".equalsIgnoreCase(keyword.getValue())) {
			EObject obj = contentAssistContext.getCurrentModel();
			if (obj != null && obj instanceof Parameter) {
				ParameterType type = ((Parameter) obj).getType();
				if (type != null && type.isWithAuto()) {
					super.completeKeyword(keyword, contentAssistContext, acceptor);
				}
			}
		} else if ("=".equalsIgnoreCase(keyword.getValue())) {
			EObject obj = contentAssistContext.getCurrentModel();
			if (obj != null && obj instanceof Parameter) {
				ParameterType type = ((Parameter) obj).getType();
				if (type != null && !type.eIsProxy()) {
					super.completeKeyword(keyword, contentAssistContext, acceptor);
				}
			}
		} else if ("{".equalsIgnoreCase(keyword.getValue())) {
			EObject obj = contentAssistContext.getCurrentModel();
			if (obj != null && obj instanceof Parameter) {
				ParameterType type = ((Parameter) obj).getType();
				if (type != null && !type.eIsProxy() && type instanceof VariantType) {
					super.completeKeyword(keyword, contentAssistContext, acceptor);
				}
			}
		} else {
			super.completeKeyword(keyword, contentAssistContext, acceptor);
		}
	}
	
	
	public void completeParameter_Auto(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		// subclasses may override
		super.completeParameter_Auto(model, assignment, context, acceptor);
	}
	
}
