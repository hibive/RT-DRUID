/*
* generated by Xtext
*/
package com.eu.evidence.rtdruid.oil.xtext.parser;

import java.io.IOException;
import java.io.Reader;

import org.antlr.runtime.ANTLRReaderStream;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.common.util.WrappedException;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.IParseResult;
import org.eclipse.xtext.util.ReplaceRegion;

import com.eu.evidence.rtdruid.oil.xtext.parser.antlr.OilParser;

public class MainOilParser extends OilParser {
	
	protected CharStreamWithInclude lastStream = null;
	
	protected URI StreamName = null;
	
	/* (non-Javadoc)
	 * @see org.eclipse.xtext.parser.antlr.AbstractAntlrParser#isReparseSupported()
	 */
	@Override
	protected boolean isReparseSupported() {
		return true;
	}
	
	/**
	 * @param streamName the streamName to set
	 */
	public void setStreamName(URI streamName) {
		StreamName = streamName;
	}
	
	/**
	 * @return the streamName
	 */
	public URI getStreamName() {
		return StreamName;
	}
	
	@Override
	public IParseResult doParse(Reader reader) {
		try {
			lastStream = new CharStreamWithInclude();
			lastStream.setStream(StreamName, new ANTLRReaderStream(reader));
			return addOffsetMap( parse(getDefaultRuleName(), lastStream));
		} catch (IOException e) {
			throw new WrappedException(e);
		}
	}
	
	/* (non-Javadoc)
	 * @see org.eclipse.xtext.parser.antlr.AbstractAntlrParser#doReparse(org.eclipse.xtext.parser.IParseResult, org.eclipse.xtext.util.ReplaceRegion)
	 */
	@Override
	protected IParseResult doReparse(IParseResult previousParseResult, ReplaceRegion replaceRegion) {
		lastStream.resetAndReplace(replaceRegion);
		return addOffsetMap(parse(getDefaultRuleName(), lastStream));
	}
	
	protected IParseResult addOffsetMap(IParseResult result) {
		
		EObject root = result.getRootASTElement();
		if (root != null) {
			root.eAdapters().add(lastStream.getLineConverterHelper());
		}
		
		return result;
	}
}
