// automatically generated by Xtext
grammar com.eu.evidence.rtdruid.oil.xtext.Oil  hidden(WS, ML_COMMENT, SL_COMMENT)
// with org.eclipse.xtext.common.Terminals 

//import "platform:/resource/oil_ecore/emf_model/osek_simple.ecore" 
import "http://com.eu.evidence.rtdruid.oil.xtext.model"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

OilFile:
	{OilFile}
	("OIL_VERSION" "=" OilVersion=STRING ";")?
	(Implementation = OilImplementation)?
	(Application = OilApplication)?
;

OilImplementation :
	"IMPLEMENTATION" Name = ID "{" (OilObjects+=OilObjectImpl)* "}" ";"
	// (":" description=STRING)? 
;


OilObjectImpl :
	Type=ObjectType "{" 
		(Parameters+=ParameterType)*
	 "}" (":" Description=STRING)? ";"
;



OilApplication :
	"CPU" Name=ID "{"
		(OilObjects+=OilObject)*
	"}" (":" Description=STRING)? ";"
;

ParameterType returns ParameterType:
	ValueType | VariantType | ReferenceType;

ValidValues: 
	Range | ValueList
;

ValueList: 
	{ValueList}
	Values+=GenericNumber ( "," Values+=GenericNumber)*
;

Range :
	{Range}
	Min=GenericNumber ".."  Max=GenericNumber
;


ValueType returns ValueType:
	{ValueType}
	Type=VType
	(WithAuto?='WITH_AUTO')?
	("[" ValidValues =ValidValues "]")?
	Name= SpecialId
	(MultiValue?='[]')?
	('=' (=> DefaultAuto?="AUTO" | DefaultValue=(GenericValue|ID)))?
	(':' Description=STRING)?
	";"
;

VariantType returns VariantType:
	{VariantType}
	Type=EType
	(WithAuto?='WITH_AUTO')?
	('['
		(Values+=EnumeratorType ( "," Values+=EnumeratorType)* )?
    ']')?
	Name= SpecialId
	(MultiValue?='[]')?
    ('=' (=> DefaultAuto?="AUTO" | DefaultValue=ID))?
	(':' Description=STRING)?
	";"
    ;
   
EnumeratorType returns EnumeratorType:
	{EnumeratorType}
	Name= SpecialId
	('{' (Parameters+=ParameterType)*  '}')?
	(':' Description=STRING)?
;

ReferenceType returns ReferenceType:
	{ReferenceType}
	Type=ObjectTypeRef
	Name= SpecialId
	(MultiValue?='[]')?
	('=' (=> DefaultAuto?="AUTO" | DefaultValue=(ID)))?
	(':' Description=STRING)?
	";"
    ;

OilObject :
	Type=ObjectType Name=ID 
	("{" (Parameters+=Parameter)* "}")?
	(':' Description=STRING)?
	";"
;

Parameter returns Parameter:
	{Parameter}
	Type=[ParameterType|SpecialId]
	'=' ( => Auto?="AUTO" | Value= GenericValue | ValueRef=[ParameterRef|SpecialId] )
	("{" (Parameters+=Parameter)* "}")?
	(':' Description=STRING)?
	";"
;

//	Value | Reference; // | Enumerator | Auto;
//
//
//Value returns Value:
//	{Value}
//	Type=[ValueType|ID]
////	Name=ID
//	'=' ( => Auto?="AUTO" | => Value=GenericValue )
//	(':' Description=STRING)?
//	";"
//;
//
//VariantReference returns VariantReference:
//	{VariantReference}
//	Type=[ParameterType|ID]
////	Name=ID
//	"=" ( => Auto?="AUTO" | Value=[ParameterRef|ID])
//	(Structured?='{'
//		(Parameters+=Parameter ( "," Parameters+=Parameter)* )?
//    '}')?
//	(':' Description=STRING)?
//	";"
//;

/*
Enumerator returns Enumerator:
	{Enumerator}
	Type=[ParameterType|EString]
//	Name=ID
	"=" Value=[EnumeratorType|EString]
	('{'
		(Parameters+=Parameter ( "," Parameters+=Parameter)* )?
    '}')?
	(':' Description=STRING)?
	";"
;*/

//Reference returns Reference:
//	{Reference}
//	Type=[ReferenceType|ID]
////	Name=ID
//	'=' (=> Value=[OilObject|ID])
//	(':' Description=STRING)?
//	";"
//    ;

SpecialId returns ecore::EString:
	ID | 'STRING' | 'UINT32' | 'INT32' | 'UINT64' | 'INT64' | 'FLOAT' | 
	'BOOLEAN' | 'ENUM' |
	'OS' | 'ALARM' | 'APPMODE' | 'COUNTER' | 'COM' | 'EVENT' | 'IPDU' | 'ISR' | 'MESSAGE' | 'NETWORKMESSAGE' | 'NM' | 'RESOURCE' | 'TASK' |
	'OS_TYPE' | 'ALARM_TYPE' | 'APPMODE_TYPE' | 'COUNTER_TYPE' | 'COM_TYPE' | 'EVENT_TYPE' | 'IPDU_TYPE' | 'ISR_TYPE' | 'MESSAGE_TYPE' | 'NETWORKMESSAGE_TYPE' | 'NM_TYPE' | 'RESOURCE_TYPE' | 'TASK_TYPE'
;

enum VType returns VType:
	STRING = 'STRING' | UINT32 = 'UINT32' | INT32 = 'INT32' | UINT64 = 'UINT64' | INT64 = 'INT64' | FLOAT = 'FLOAT';

enum EType returns EType:
	BOOLEAN = 'BOOLEAN' | ENUM = 'ENUM';
	
GenericValue returns ecore::EString:
	STRING|INT|FLOAT
;
GenericNumber returns ecore::EString:
	INT|FLOAT
;


enum ObjectType returns ObjectType:
	OS = 'OS' | ALARM = 'ALARM' | APPMODE = 'APPMODE' | COUNTER = 'COUNTER' | COM = 'COM' | EVENT = 'EVENT' | IPDU = 'IPDU' | ISR = 'ISR' | MESSAGE = 'MESSAGE' | NETWORKMESSAGE = 'NETWORKMESSAGE' | NM = 'NM' | RESOURCE = 'RESOURCE' | TASK = 'TASK' | APPLICATION = 'APPLICATION';

enum ObjectTypeRef returns ObjectType:
	OS = 'OS_TYPE' | ALARM = 'ALARM_TYPE' | APPMODE = 'APPMODE_TYPE' | COUNTER = 'COUNTER_TYPE' | COM = 'COM_TYPE' | EVENT = 'EVENT_TYPE' | IPDU = 'IPDU_TYPE' | ISR = 'ISR_TYPE' | MESSAGE = 'MESSAGE_TYPE' | NETWORKMESSAGE = 'NETWORKMESSAGE_TYPE' | NM = 'NM_TYPE' | RESOURCE = 'RESOURCE_TYPE' | TASK = 'TASK_TYPE' | APPLICATION = 'APPLICATION_TYPE';
	

// Aggiungere la gestione dei numeri esadecimali
INT returns ecore::EInt: ('+'|'-')? (( NON_ZERO_INT (ZERO_INT | NON_ZERO_INT)* ) | ZERO_INT | HEX);
FLOAT returns ecore::EFloat: ('+'|'-')? (ZERO_INT | (NON_ZERO_INT (ZERO_INT | NON_ZERO_INT)*)) =>'.' (ZERO_INT | NON_ZERO_INT)+;
	
	
terminal ID  		: ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;


terminal HEX returns ecore::EInt: "0x"(ZERO_INT | NON_ZERO_INT | 'A'..'F' | 'a'..'f')+;
terminal NON_ZERO_INT returns ecore::EInt: ('1'..'9');
terminal ZERO_INT returns ecore::EInt: ('0');

terminal STRING	: 
			'"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|'"') )* '"' |
			"'" ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|"'") )* "'"
		; 
terminal ML_COMMENT	: '/*' -> '*/';
terminal SL_COMMENT 	: '//' !('\n'|'\r')* ('\r'? '\n')?;

terminal WS			: (' '|'\t'|'\r'|'\n')+;

terminal ANY_OTHER: .;