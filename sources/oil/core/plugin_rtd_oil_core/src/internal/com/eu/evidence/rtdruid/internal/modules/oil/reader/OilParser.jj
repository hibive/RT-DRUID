
options {
	STATIC = false;
	IGNORE_CASE = false;
	CACHE_TOKENS = true;
	OUTPUT_DIRECTORY = ".";
//	LOOKAHEAD = 2;
//	FORCE_LA_CHECK = true;
	
	DEBUG_PARSER = false;
//	OPTIMIZE_TOKEN_MANAGER = false;
	
}

PARSER_BEGIN (OilParser)
package com.eu.evidence.rtdruid.internal.modules.oil.reader;

import java.io.InputStream;
import java.util.LinkedList;

import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import com.eu.evidence.rtdruid.internal.modules.oil.keywords.IOilXMLLabels;


/** Parse an oil file and convert it into a XML file.
* @author Nicola Serreli
*/
public class OilParser extends MergeHelper {

	protected final static String LOCATION = "Location_inside_the_oil";
        
        protected final static String[] ATTR_ATT_LIST = {
    			IOilXMLLabels.ATTR_AUTO,
    			IOilXMLLabels.ATTR_DEFAULT_VALUE,
    			IOilXMLLabels.ATTR_MULTIPLE_VALUES,
    			IOilXMLLabels.ATTR_TYPE,
    			IOilXMLLabels.ATTR_WITH_AUTO
    		};
        protected final static String[] ATTR_REF_LIST = {
    			IOilXMLLabels.ATTR_MULTIPLE_VALUES,
    			IOilXMLLabels.ATTR_OBJ_TYPE,
    		};
        protected final static String[] ATTR_VAR_LIST = {
    			IOilXMLLabels.ATTR_DEFAULT_VALUE,
    			IOilXMLLabels.ATTR_MULTIPLE_VALUES,
    			IOilXMLLabels.ATTR_WITH_AUTO
    		};
        protected final static String[] ATTR_RANGE_LIST = {
    			IOilXMLLabels.ATTR_MAX,
    			IOilXMLLabels.ATTR_MIN
    		};
//	protected String defaultImplementationFile = null;
	protected boolean enableApplicationSection = true;

	/*public static void main(String args[]) throws ParseException {
		OilParser parser = new OilParser(System.in);

		OilInfo risp = parser.start();
		System.out.println("--- FINE ---");
		System.out.println(risp.getImpl().getDocumentElement().toString() );
		System.out.println(risp.getAppl().getDocumentElement().toString() );
		
	}*/

//	public void setDefaultImplementationFile(String fileName) {
//		defaultImplementationFile = fileName;
//	}
	public void setEnableApplicationSection(boolean value) {
		enableApplicationSection = value;
	}
	
	/**
	 * Search a child with specified properties. If itsn't found, make a new one. 
	 */
	protected Element makeElement(Node parent, String elemName, String attrName, String attrValue) {
		NodeList children = parent.getChildNodes();
		
		for (int i=0; i<children.getLength(); i++) {
			Node n = children.item(i);
			
			if (n instanceof Element) {
				Element child =(Element) n;
				
				// check properties
				boolean ok = checkStrings(elemName,child.getNodeName());
				if (ok && attrName != null) {
					ok = checkStrings(attrValue, child.getAttribute(attrName));
				}
				if (ok) { // found
					return child;
				}
			}
		}
		
		Element child = parent.getOwnerDocument().createElement(elemName);
		if (attrName != null) {
			child.setAttribute(attrName, attrValue);
		}
		
		parent.appendChild(child);
		
		return child;
	}
	/**
	 * Search a child with specified properties. If itsn't found, make a new one. 
	 */
	protected Element makeElement(Node parent, String elemName, String[] attrName, String[] attrValue) {
		NodeList children = parent.getChildNodes();
		
		for (int i=0; i<children.getLength(); i++) {
			Node n = children.item(i);
			
			if (n instanceof Element) {
				Element child =(Element) n;
				
				// check properties
				boolean ok = checkStrings(elemName,child.getNodeName());
				for (int att=0; att<attrName.length && ok; att++) {
				
					ok = checkStrings(attrValue[att], child.getAttribute(attrName[att]));
				}
			
				if (ok) { // found
					return child;
				}
			}
		}
		
		Element child = parent.getOwnerDocument().createElement(elemName);
		for (int att=0; att<attrName.length; att++) {
			child.setAttribute(attrName[att], attrValue[att]);
		}
		
		parent.appendChild(child);
		
		return child;
	}

	/**
	 * Search an attribute and check the value. If the attribute doesn't exist, set it. 
	 *
	 * @throws ParseException if the attribute is already setted but with a different value
	 */
	protected void setAttribute(Element elem, String attrName, String attrValue, Token token)
			 throws ParseException {
			 
		if (!elem.hasAttribute(attrName)) {
			if (attrValue != null) {
				elem.setAttribute(attrName, attrValue);
			}
			
		} else if (!checkStrings(elem.getAttribute(attrName), attrValue)) {
			throw new ParseException("Found an element declared more than one time with differents proterties.\n"
			+ "property = " + attrName + "; old value = " + elem.getAttribute(attrName) + "; new value = " + attrValue + "\n"
			+ "(row =" +token.beginLine + ", col = "+token.beginColumn+")");
		}
	}

}

PARSER_END (OilParser)


// ----------- START ----------------

OilInfo start() :
{
	DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
	Document impl, appl;
	String nome = null;

	try {
		impl = docFactory.newDocumentBuilder().newDocument();
		appl = docFactory.newDocumentBuilder().newDocument();
	} catch (ParserConfigurationException e) {
		throw new IllegalStateException("OilParser: exception during creation of a new Document:\n\t"
			+ e.getMessage());
	}

	Element root1 = impl.createElement(IOilXMLLabels.ELEM_IMPLEMENTATION);
	impl.appendChild( root1 );

	Element root2 = appl.createElement(IOilXMLLabels.ELEM_APPLICATION);
	appl.appendChild( root2 );
}
{
	
	(
		// Drops the information about version
		OIL_version()
		// nome identifies this Builder and will be the first "cpu" type
		nome = implementation_definition(root1)
	)?

	{  if (nome == null) {
/*		// use the default Implementation File
		OilInfo childInfo = null;
		InputStream input = this.getClass().getResourceAsStream(defaultImplementationFile);
		OilParser child = new OilParser(input);
		child.setEnableApplicationSection(false);
		try {
			childInfo = child.start();
		} catch (ParseException e) {
			//e.printStackTrace();
		    throw new RuntimeException(
			    "OilReader: exception during the parse.",
                            e);
		} catch (RuntimeException e) {
			//e.printStackTrace();
		    throw new RuntimeException(
			    "OilReader: exception during the parse.",
				    e);
		}
		nome = childInfo.name;
	        impl = childInfo.impl;	
	    */    
/*	  } else {
		// Drops the information about version
		OIL_version()
		// nome identifies this Builder and will be the first "cpu" type
		nome = implementation_definition(root1)
*/	  }
	}


	// check the application Section only if required
	//({if (enableApplicationSection) { application_definition(appl, root2); }})?
	( application_definition(appl, root2) )?
	<EOF>

	{
		OilInfo oi = new OilInfo( nome, impl, appl);
		return oi;
	}
}



// ----------- SPECIAL TOKEN ----------------

//SPECIAL_TOKEN : /* WHITE SPACE */
SKIP :
{
  " "
  | "\t"
  | "\n"
  | "\r"
  | "\f"
  | "\u00a0"  
}

SPECIAL_TOKEN : /* COMMENTS */
{
  <SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
  | <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}

// ----------- TOKEN ----------------

// Reserved Word
TOKEN:
{
	<TRUE : "TRUE">
|	
	<FALSE: "FALSE">
|
	<UINT32 : "UINT32">
|
	<INT32 : "INT32">
|
	<UINT64 : "UINT64">
|
	<INT64 : "INT64">
|		
	<FLOAT : "FLOAT">
|		
	<ENUM : "ENUM">
|		 
	<STRING : "STRING">
|
	<BOOLEAN : "BOOLEAN">
|
	<AUTO : "AUTO">
|
	<NO_DEFAULT : "NO_DEFAULT">
|
	<OIL_VERSION : "OIL_VERSION">
|
	<IMPLEMENTATION : "IMPLEMENTATION">
|
	<CPU : "CPU">
|
	<auto_specifier : "WITH_AUTO"  >
|
	<object :
		"OS" | "APPLICATION" | "TASK" | "COUNTER" | "ALARM" | "RESOURCE" |
		"EVENT" | "ISR" | "MESSAGE" | "COM" | "NM" | "NETWORKMESSAGE" |
		"APPMODE" | "IPDU"
	>
|	
	<object_ref_type :
		"OS_TYPE" | "APPLICATION_TYPE" | "TASK_TYPE" | "COUNTER_TYPE" | "ALARM_TYPE" |
		"RESOURCE_TYPE" | "EVENT_TYPE" | "ISR_TYPE" | "MESSAGE_TYPE" | "NETWORKMESSAGE_TYPE" |
		"COMMM_TYPE" | "NM_TYPE" | "APPMODE_TYPE" | "IPDU_TYPE"
	>
}

TOKEN:
{
	<String : "\"" (~["\""])* "\"" >
}

//< implementation_definition, enumerator, default_name,
//  application_definition, object_definition, attribute_value
//>
TOKEN :
{
	<name :	// like standard C
		(["a"-"z", "A"-"Z", "_"])
		(["a"-"z", "A"-"Z", "_", "0"-"9"])*
	>
}


// Type
//<
//	number_range(), default_number(),
//	float_range(), default_float(),
//	attribute_value()
//>
TOKEN :
{
	<number : <dec_number> | <hex_number>>
|
	<float_ : <sign> <dec_digits> "." <dec_digits> <exponent> >
|
	<#dec_number : <sign> <int_digits>>
|
	<#sign : ( ["+","-"] )?> 
|
	<#int_digits : <zero_digit> | <pos_digit> | <pos_digit> <dec_digits>>
|
	<#dec_digits : (<dec_digit>)+ >
|
	<#exponent : ( ["e", "E"] <sign> <dec_digits> )? >
|	
	<#zero_digit : "0">
|
	<#pos_digit : ["1" - "9"]>
|
	<#dec_digit : <zero_digit> | <pos_digit> >
|
	<#hex_number : "0x" ( ["0"-"9", "A"-"F", "a"-"f"])+ >

//	<boolean_ : <TRUE> | <FALSE>>
}

String 	getDescription() :
{
	String s;
}
{ ":" s= getString()
	{
		// drop \"
		return s;
	}
}

String 	getString() :
{
	Token t;
}
{ 	t=<String>
	{
		// drop \"
		return t.image.substring(1,t.image.length()-1);
	}
}

// ----------- Syntax of OIL ----------------


void OIL_version() :
{
}
{
	<OIL_VERSION> "="
	getString() // version
	(getDescription())? // description
	";"
}


// ----------- Implementation Definition ----------------

String implementation_definition(Node elem) :
{
	Token t1;
	String nome;
	
}
{
	<IMPLEMENTATION>
	// get name of this structure
	t1=<name>
	{
		//System.err.println("nome = " + t1.image );
		nome = t1.image;
		((Element) elem).setAttribute(IOilXMLLabels.ATTR_NAME, nome);
	}
	"{" 
		(implementation_spec(elem))+	// ONE or MORE implementation_spec
	"}"
	(addDescription((Element) elem))? // description
	";"
	{
		return nome;
	}
}

void implementation_spec(Node elem) :
{
	Token t1;
	Element nContainer = null;
}
{
	// get name of this container
	t1=<object> {
		nContainer = makeElement(elem, IOilXMLLabels.ELEM_FIRST_LEVEL_OBJ, IOilXMLLabels.ATTR_OBJ_TYPE, t1.image);
	}
	"{" 
		(implementation_def(nContainer, false) )*	// ZERO o MORE implemenation_def
	"}"
	(addDescription(nContainer))? // description
	";"
	
}

void implementation_def(Node elem, boolean nested) :
{
}
{
	impl_attr_def(elem, nested) | impl_ref_def(elem, nested)
}

void impl_attr_def(Node elem, boolean nested) :
{
	Token nameToken;
	boolean wAuto = false;
	boolean multiValues = false;
	// range or list of values -> string[0] = "range" or "list"
	String[] values = null;
	// "default value" = (0), "AUTO" = (1) -> only one != null 
	// dValue = null means "no_default"
	String[] dValue = null;
	// list of enumerator
	Element[] enumList = null;

	// used after to make the xml Document
	Element nodo;
	int tipo;	// tells the type of this node
	String tipoTxt;
	String descr = null;
			
}
{
(	
	<UINT32> { tipo = UINT32; tipoTxt ="uint32"; }
		(<auto_specifier> { wAuto = true; })?
		values = number_range() 
		( nameToken = <name> | nameToken = <object>)
		("[" "]"  { multiValues = true; })?
		dValue = default_number()
		(descr = getDescription())? ";"

|
	<INT32> { tipo = INT32; tipoTxt ="int32"; }
		(<auto_specifier> { wAuto = true; })?
		values = number_range() 
		( nameToken = <name> | nameToken = <object>)
		("[" "]"  { multiValues = true; })?
		dValue = default_number()
		(descr = getDescription())? ";"

|
	<UINT64> { tipo = UINT64; tipoTxt ="uint64"; }
		(<auto_specifier> { wAuto = true; })?
		values = number_range()
		( nameToken = <name> | nameToken = <object>)
		("[" "]"  { multiValues = true; })?
		dValue = default_number()
		(descr = getDescription())? ";"
|
	<INT64> { tipo = INT64; tipoTxt ="int64"; }
	 	(<auto_specifier>  { wAuto = true; })?
		values = number_range() 
		( nameToken = <name> | nameToken = <object>)
		("[" "]" { multiValues = true; })?
		dValue = default_number()
		(descr = getDescription())? ";"
|		
	<FLOAT> { tipo = FLOAT; tipoTxt ="float"; }
	 	(<auto_specifier> { wAuto = true; })?
		values = float_range() 
		( nameToken = <name> | nameToken = <object>)
		("[" "]" { multiValues = true; })?
		dValue = default_float()
		(descr = getDescription())? ";"
|		
	<ENUM> { tipo = ENUM; tipoTxt = "enum"; }
	 	(<auto_specifier> { wAuto = true; })?
		enumList = enumeration(elem.getOwnerDocument())
		( nameToken = <name> | nameToken = <object>)
		("[" "]" { multiValues = true; })?
		dValue = default_name()
		(descr = getDescription())? ";"
|		 
	<STRING> { tipo = STRING; tipoTxt = "String"; }
		(<auto_specifier> { wAuto = true; })?
		( nameToken = <name> | nameToken = <object>)
		("[" "]" { multiValues = true; })?
		dValue = default_string()
		(descr = getDescription())? ";"
|		 
	<BOOLEAN> { tipo = BOOLEAN; tipoTxt = "boolean"; }
		(<auto_specifier> { wAuto = true; })?
		enumList = bool_values(elem.getOwnerDocument())
		( nameToken = <name> | nameToken = <object>)
		("[" "]" { multiValues = true; })?
		dValue = default_bool()
		(descr = getDescription())? ";"
)


	{// Look over data

		if (searchElement(elem, IOilXMLLabels.ELEM_REFERENCE, IOilXMLLabels.ATTR_NAME, nameToken.image) != null) {
			throw new ParseException("Found an element declared more than one time with differents proterties.\n"
			+ nameToken.image + " declared as REFERENCE and as " + tipoTxt + "\n"
			+ "(row =" +nameToken.beginLine + ", col = "+nameToken.beginColumn+")");
		}

		//System.err.println( tipo + " " + tipoTxt);
		// leaf
		if ( tipo == UINT32 ||
		     tipo ==  INT32 ||
		     tipo == UINT64 ||
		     tipo ==  INT64 ||
		     tipo ==  FLOAT ||
		     tipo == STRING ) {
			if (searchElement(elem, IOilXMLLabels.ELEM_VARIANT, IOilXMLLabels.ATTR_NAME, nameToken.image) != null) {
				throw new ParseException("Found an element declared more than one time with differents proterties.\n"
				+ nameToken.image + " declared as VARIANT and as " + tipoTxt + "\n"
				+ "(row =" +nameToken.beginLine + ", col = "+nameToken.beginColumn+")");
			}
			nodo = makeElement(elem, IOilXMLLabels.ELEM_ATTRIBUTE, IOilXMLLabels.ATTR_NAME, nameToken.image);
		}
		else {	// ENUM , BOOLEAN
			
			if (searchElement(elem, IOilXMLLabels.ELEM_ATTRIBUTE, IOilXMLLabels.ATTR_NAME, nameToken.image) != null) {
				throw new ParseException("Found an element declared more than one time with differents proterties.\n"
				+ nameToken.image + " declared as ATTRIBUTE and as " + tipoTxt + "\n"
				+ "(row =" +nameToken.beginLine + ", col = "+nameToken.beginColumn+")");
			}
			nodo = makeElement(elem, IOilXMLLabels.ELEM_VARIANT, IOilXMLLabels.ATTR_NAME, nameToken.image);
		}
		
		tipoTxt = tipoTxt.toUpperCase();
		setAttribute(nodo, IOilXMLLabels.ATTR_TYPE, tipoTxt, nameToken);

		if (nested) {
			setAttribute(nodo, LOCATION, "(row =" +nameToken.beginLine + ", col = "+nameToken.beginColumn+")", nameToken);
		}


		// with auto option
		if (wAuto) {
			setAttribute(nodo, IOilXMLLabels.ATTR_WITH_AUTO, "true", nameToken);
		}

		// default Value / auto Value
		if (dValue != null) {
			if (dValue[0] != null) {
				setAttribute(nodo, IOilXMLLabels.ATTR_DEFAULT_VALUE, dValue[0], nameToken);
			} else if (dValue[1] != null) {
				setAttribute(nodo, IOilXMLLabels.ATTR_AUTO, "true", nameToken);
			}
		}
		
		// multiple Values option
		if (multiValues) {
			setAttribute(nodo, IOilXMLLabels.ATTR_MULTIPLE_VALUES, "true", nameToken);
		}

		// range or list of values
		if (values != null) {
			// range
			if (values[0].equals("range") ) {
				if (searchElement(nodo, IOilXMLLabels.ELEM_VALUE, null, null) != null) {
					throw new ParseException("Found an element declared more than one time with differents proterties.\n"
					+ "RANGE-VALUE of " + nameToken.image + "\n"
					+ "(row =" +nameToken.beginLine + ", col = "+nameToken.beginColumn+")");
				}
				
                                Element el = makeElement(elem, IOilXMLLabels.ELEM_RANGE, (String) null, (String) null);
				
				setAttribute(el, IOilXMLLabels.ATTR_MIN, values[1], nameToken);
				setAttribute(el, IOilXMLLabels.ATTR_MIN, values[2], nameToken);
			}

			// list of values
			else if (values[0].equals("value") ) {
				if (searchElement(nodo, IOilXMLLabels.ELEM_RANGE, null, null) != null) {
					throw new ParseException("Found an element declared more than one time with differents proterties.\n"
					+ "RANGE-VALUE of " + nameToken.image + "\n"
					+ "(row =" +nameToken.beginLine + ", col = "+nameToken.beginColumn+")");
				}
				
				for (int i=1; i< values.length; i++) {
					makeElement(elem, IOilXMLLabels.ELEM_VALUE, IOilXMLLabels.ATTR_VALUE, values[1]);
				}
			}
		}

		// enum list
		if ( enumList != null) {
			for (int i=0; i< enumList.length; i++) {

				if (nested) {
					nodo.appendChild( enumList[i] );
				} else {
					mergeElement(nodo, enumList[i]);
				}
			}
		}

		// description
		if (descr != null) {
			Element nDescr = nodo.getOwnerDocument().createElement(IOilXMLLabels.ELEM_DESCRIPTION);
			nDescr.appendChild( nodo.getOwnerDocument().createTextNode( descr ) );
			nodo.appendChild(nDescr);
		}
		
	}	// end of impl_attr_def
		
}


String[] number_range() :
{
	LinkedList valori = null;
	Token t;
}
{
	(
	LOOKAHEAD(4)
		// range
		"[" t=<number> { 
			valori = new LinkedList();
			valori.addLast("range");
			valori.addLast(t.image);
		} ".." t=<number> {
			valori.addLast(t.image);
		} "]"	
	|
		// list
		"[" t=<number> {
			valori = new LinkedList();
			valori.addLast("list");
			valori.addLast(t.image);
		} ( "," t=<number> {
			valori.addLast(t.image);
		} )* "]"
	)?

	{
		if (valori == null) return null;	// no range / values
		
		// return range or values
		return (String[]) valori.toArray( new String[0] );
	}
}

String[] default_number() :
{	
	String[] risp = null;
	Token t;
}
{
	("=" (
		t=<number> {
			risp = new String[2];
			risp[0] = t.image;
			risp[1] = null;
		} | <NO_DEFAULT> {
			// nothing to do
		} | <AUTO> {
			risp = new String[2];
			risp[0] = null;
			risp[1] = new String("auto");
		}
	))?
	{	return risp;	}
}

String[] float_range() :
{
	String[] risp = null;
	Token t;
}
{
	(
		"["  t=<float_> {
			risp = new String[3];
			risp[0] = new String("range");
			risp[1] = t.image;
		}".." t=<float_> {
			risp[2] = t.image;
		}"]"
	)?

	{	return risp;	}
}

String[] default_float() :
{
	String[] risp = null;
	Token t;
}
{
	("=" (
		t=<float_> {
			risp = new String[2];
			risp[0] = t.image;
			risp[1] = null;
		} | <NO_DEFAULT> {
			// nothing to do
		} | <AUTO> {
			risp = new String[2];
			risp[0] = null;
			risp[1] = new String("auto");
		}
	))?
	
	{	return risp;	}
}

Element[] enumeration(Document doc) :
{
	LinkedList risp = null;
	Element tmp;
}
{
	"[" ( tmp = enumerator(doc) {	// the first
		risp = new LinkedList();
		risp.addLast( tmp );
		
	} ("," tmp = enumerator(doc) {	// others
		risp.addLast( tmp );
	} )* )? "]"

	{
		if ( risp == null)
			return null;
		
		return (Element[]) risp.toArray( new Element[0] );
		
	}
}

Element enumerator(Document doc) :
{
	Element elem = doc.createElement(IOilXMLLabels.ELEM_ENUMERATOR);
	Token t;
}
{
	t = <name> {
		elem.setAttribute(IOilXMLLabels.ATTR_NAME, t.image);
	}
	impl_parameter_list(elem)
	(addDescription(elem))? // description

	{	return elem;	}
}

void impl_parameter_list(Node elem) :
{
}
{
	( "{" (implementation_def(elem, true))* "}" )?
}

String[] default_name() :
{
	String[] risp = null;
	Token t;
}
{
	("=" (
		t=<name> {
			risp = new String[2];
			risp[0] = t.image;
			risp[1] = null;
		} | <NO_DEFAULT> {
			// nothing to do
		} | <AUTO> {
			risp = new String[2];
			risp[0] = null;
			risp[1] = new String("auto");
		}
	))?

	{	return risp;	}
}



String[] default_string() :
{
	String[] risp = null;
	String s;
}
{
	("=" (
		s=getString() {
			risp = new String[2];
			risp[0] = s;
			risp[1] = null;
		} | <NO_DEFAULT> {
			// nothing to do
		} | <AUTO> {
			risp = new String[2];
			risp[0] = null;
			risp[1] = new String("auto");
		}
	))?

	{       return risp;    }
}

Element[] bool_values(Document doc) :
{
	Element[] risp = null;

	// create two Element (True and ...
	risp = new Element[2];
	risp[0] = doc.createElement(IOilXMLLabels.ELEM_ENUMERATOR);
	risp[0].setAttribute(IOilXMLLabels.ATTR_NAME, "TRUE");
	// .. and false)
	risp[1] = doc.createElement(IOilXMLLabels.ELEM_ENUMERATOR);
	risp[1].setAttribute(IOilXMLLabels.ATTR_NAME, "FALSE");

}
{
	(
		"[" <TRUE> 
		impl_parameter_list(risp[0])
		(addDescription(risp[0]))? // description
		","

		// ---
		
		<FALSE>
		impl_parameter_list(risp[1])
		(addDescription(risp[1]))? // description
		"]"
	)?
	{	return risp;	}
}

String[] default_bool() :
{
	String[] risp = null;
}
{
	("=" (
		<TRUE> {
			risp = new String[2];
			risp[0] = "TRUE";
			risp[1] = null;
		} | <FALSE> {
			risp = new String[2];
			risp[0] = "FALSE";
			risp[1] = null;
		} | <NO_DEFAULT> {
			// nothing to do
		} | <AUTO> {
			risp = new String[2];
			risp[0] = null;
			risp[1] = new String("auto");
		}
	))?

	{       return risp;    }
}


void impl_ref_def(Node elem, boolean nested) :
{
	Element nodo = null;
	Token t1,t2;
}
{
	t1=<object_ref_type> {
	}
	(t2=<name> | t2=<object>) {
		if (searchElement(elem, IOilXMLLabels.ELEM_VARIANT, IOilXMLLabels.ATTR_NAME, t2.image) != null
			|| searchElement(elem, IOilXMLLabels.ELEM_ATTRIBUTE, IOilXMLLabels.ATTR_NAME, t2.image) != null) {
			throw new ParseException("Found an element declared more than one time with differents proterties.\n"
			+ t2.image + " declared as VARIANT/ATTRIBUTE and as " + t1.image + "\n"
			+ "(row =" +t2.beginLine + ", col = "+t2.beginColumn+")");
		}
		nodo = makeElement(elem, IOilXMLLabels.ELEM_REFERENCE, IOilXMLLabels.ATTR_NAME, t2.image);

		
		if (nested) {
			setAttribute(nodo, LOCATION, "(row =" +t2.beginLine + ", col = "+t2.beginColumn+")", t2);
		}
		setAttribute(nodo, IOilXMLLabels.ATTR_OBJ_REF_TYPE, t1.image, t2);

	}
	("[" "]" {
		setAttribute(nodo, IOilXMLLabels.ATTR_MULTIPLE_VALUES, "true", t2);
	})? 
	(addDescription(nodo))? // description
	";"
}

// ----------- Application Definition ----------------

void application_definition(Document doc, Element elem) :
{
	Token t;
}
{	
	<CPU> 
	t=<name> {
		elem.setAttribute(IOilXMLLabels.ATTR_NAME, t.image );
	}
	"{" object_definition_list(doc, elem) "}"
	(addDescription(elem))? // description
	";"
}

void object_definition_list(Document doc, Element elem) :
{
}
{
	( 
		object_definition(doc, elem)
	)*
}

void object_definition(Document doc, Node elem) :
{
	Token t;
	Element nodo = doc.createElement(IOilXMLLabels.ELEM_OBJECT);
	elem.appendChild(nodo);
}
{
	t = <object> {
		nodo.setAttribute(IOilXMLLabels.ATTR_TYPE, t.image );
	}
	t = <name> {
		nodo.setAttribute(IOilXMLLabels.ATTR_NAME, t.image );
	}
	( "{" parameter_list(doc, nodo) "}" )?
	(addDescription(nodo))? // description
	 ";"
}

void parameter_list(Document doc, Node elem) :
{
}
{
	(
		parameter(doc, elem)
	)*
}

void parameter(Document doc, Node elem) :
{
	Token t;
	Element nodo = doc.createElement(IOilXMLLabels.ELEM_PARAMETER);
	elem.appendChild(nodo);
}
{
	(t=<name> | t=<object>) {
		nodo.setAttribute(IOilXMLLabels.ATTR_NAME, t.image );
	} "=" attribute_value(doc, nodo)
	(addDescription(nodo))? // description
	";"
}

void attribute_value(Document doc, Element elem) :
{
	Token t;
	String s;
	Element nodo;
}
{
	t = <name> {
		 nodo = doc.createElement(IOilXMLLabels.ELEM_ENUM_VALUE);
		 elem.appendChild(nodo);
	
		nodo.setAttribute(IOilXMLLabels.ATTR_NAME, t.image );

	} ( "{" parameter_list(doc, nodo) "}")?
|
	( t = <TRUE> | t = <FALSE> ) {
		nodo = doc.createElement(IOilXMLLabels.ELEM_ENUM_VALUE);
		elem.appendChild(nodo);
	
		nodo.setAttribute(IOilXMLLabels.ATTR_NAME, t.image );

	}( "{" parameter_list(doc, nodo) "}" )?
|
	t = <number> {
		elem.setAttribute(IOilXMLLabels.ATTR_CURR_VALUE, t.image );
	}
|
	t = <float_> {
		elem.setAttribute(IOilXMLLabels.ATTR_CURR_VALUE, t.image );
	}
|
	s = getString() {
		elem.setAttribute(IOilXMLLabels.ATTR_CURR_VALUE, s );
	}
|
	t = "AUTO" {
		elem.setAttribute(IOilXMLLabels.ATTR_AUTO, "true" );
	}
}

void addDescription(Element elem) :
{
	String descr;
}
{
	descr = getDescription() {
                Element nDescr = elem.getOwnerDocument().createElement(IOilXMLLabels.ELEM_DESCRIPTION);
                nDescr.appendChild( elem.getOwnerDocument().createTextNode( descr ) );
                elem.appendChild(nDescr);
        }
}
