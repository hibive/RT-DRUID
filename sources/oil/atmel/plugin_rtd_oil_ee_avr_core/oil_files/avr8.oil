OIL_VERSION = "2.4";

IMPLEMENTATION ee {
    OS {
        ENUM [
            AVR8 {
                STRING ID = "default_cpu";
                STRING APP_SRC[];
                
                BOOLEAN [
                    TRUE {
						BOOLEAN [
							TRUE {
								UINT32 SYS_SIZE;
							},
							FALSE
						] IRQ_STACK;
                    },
                FALSE
                ] MULTI_STACK = FALSE;

                UINT32 SYS_STACK_SIZE;
            }
            

        ] CPU_DATA[];

		ENUM [
			XBOW_MIB5X0 {
				BOOLEAN USELEDS = FALSE;
			},
			ATMEL_STK50X {
				BOOLEAN USELEDS = FALSE;
				BOOLEAN USEBUTTON = FALSE;
			},
			ATMEL_STK600 {
				BOOLEAN USELEDS = TRUE;
				ENUM [A, B, C, D, E, F, G, H, J, K, L, M, N, P, Q] LEDPORT = A;
			},
			ARDUINO_UNO {
				BOOLEAN USELEDS = TRUE;
			}
		] BOARD_DATA = NO_BOARD;
		
		ENUM [
			XMEGA {
			
				ENUM [
					XMEGA_16d4
				] MODEL = XMEGA_16d4;

				BOOLEAN AVR_PGMSPACE = FALSE;

				/* Timer Counter Type 1 */
				BOOLEAN USE_TC_HW = FALSE;

				// MCU DRIVER 
				BOOLEAN  [
					TRUE {
						ENUM [STANDARD, EXTENDED] MCU_STATUS = STANDARD;
						BOOLEAN MCU_DEINIT_API = FALSE;
						BOOLEAN MCU_INITCLOCK_API = FALSE;
						BOOLEAN MCU_DEINITCLOCK_API = FALSE;
						BOOLEAN MCU_GETCLOCKSTATUS_API = FALSE;
						BOOLEAN MCU_DISTRIBUTECLOCK_API = FALSE;
						BOOLEAN MCU_SETMODE_API = FALSE;
						BOOLEAN MCU_GETRESETREASON_API = FALSE;
						BOOLEAN MCU_PERFORMRESET_API = FALSE;
					}, FALSE
				] ENABLE_MCU_DRIVER = FALSE;
		
				/* POWER REDUCTION */
				BOOLEAN  [ 
					TRUE {
						BOOLEAN PULL_UP = FALSE;
						BOOLEAN PORT_OUT = FALSE;
						BOOLEAN JTAG = FALSE;
					}, FALSE
				] ENABLE_MCU_POWER_REDUCTION = FALSE;
		
				/* E2P DRIVER */
				BOOLEAN  [
					TRUE {
						ENUM [STANDARD, EXTENDED] E2P_STATUS = STANDARD;
						BOOLEAN E2P_INTERRUPT = FALSE;
						BOOLEAN E2P_SYNCHRONOUS = FALSE;
						BOOLEAN E2P_GETSTATUS_API = FALSE;
						BOOLEAN E2P_DEINIT_API = FALSE;
						BOOLEAN E2P_READ_API = FALSE;
						BOOLEAN E2P_WRITE_API = FALSE;
						BOOLEAN E2P_ERASE_API = FALSE;
						BOOLEAN E2P_COMPARE_API = FALSE;
						BOOLEAN E2P_CANCEL_API = FALSE;
					}, FALSE
				] ENABLE_E2P_DRIVER = FALSE;

				/* GPIO DRIVER */
				BOOLEAN  [
					TRUE {
						ENUM [STANDARD, EXTENDED] GPIO_STATUS = STANDARD;
						BOOLEAN GPIO_DEINIT_API = FALSE;
						BOOLEAN GPIO_READCHANNEL_API = FALSE;
						BOOLEAN GPIO_READCHANNEL_NTS = FALSE;
						BOOLEAN GPIO_WRITECHANNEL_API = FALSE;
						BOOLEAN GPIO_WRITECHANNEL_NTS = FALSE;
						BOOLEAN GPIO_FLIPCHANNEL_API = FALSE;
						BOOLEAN GPIO_FLIPCHANNEL_NTS = FALSE;
						BOOLEAN GPIO_ENABLENOTIF_API = FALSE;
						BOOLEAN GPIO_DISABLENOTIF_API = FALSE;
					}, FALSE
				] ENABLE_GPIO_DRIVER = FALSE;
			
				/* GPT DRIVER */
				BOOLEAN  [
					TRUE {
						ENUM [STOP, DIV1, DIV2, DIV4, DIV8, DIV64, DIV256, DIV1024] GPT_CHANNEL_C_0 = STOP;
						ENUM [STOP, DIV1, DIV2, DIV4, DIV8, DIV64, DIV256, DIV1024] GPT_CHANNEL_D_0 = STOP;
						ENUM [STOP, DIV1, DIV2, DIV4, DIV8, DIV64, DIV256, DIV1024] GPT_CHANNEL_E_0 = STOP;
						ENUM [STOP, DIV1, DIV2, DIV4, DIV8, DIV64, DIV256, DIV1024] GPT_CHANNEL_F_0 = STOP;
				
						ENUM [STOP, DIV1, DIV2, DIV4, DIV8, DIV64, DIV256, DIV1024] GPT_CHANNEL_C_1 = STOP : "Requires USE_TC_HW = TRUE.";
						ENUM [STOP, DIV1, DIV2, DIV4, DIV8, DIV64, DIV256, DIV1024] GPT_CHANNEL_D_1 = STOP : "Requires USE_TC_HW = TRUE.";
						ENUM [STOP, DIV1, DIV2, DIV4, DIV8, DIV64, DIV256, DIV1024] GPT_CHANNEL_E_1 = STOP : "Requires USE_TC_HW = TRUE.";
						ENUM [STOP, DIV1, DIV2, DIV4, DIV8, DIV64, DIV256, DIV1024] GPT_CHANNEL_F_1 = STOP : "Requires USE_TC_HW = TRUE.";
				
						ENUM [STANDARD, EXTENDED] GPT_STATUS = STANDARD;
						BOOLEAN GPT_ONESHOT = FALSE;
						BOOLEAN GPT_GETSTATUS_API = FALSE;
						BOOLEAN GPT_DEINIT_API = FALSE;
						BOOLEAN GPT_ENABLENOTIF_API = FALSE;
						BOOLEAN GPT_DISABLENOTIF_API = FALSE;
						BOOLEAN GPT_STOPTIMER_API = FALSE;
						BOOLEAN GPT_GETTIMEELAPSED_API = FALSE;
						BOOLEAN GPT_GETTIMEREMAINING_API = FALSE;
					}, FALSE
				] ENABLE_GPT_DRIVER = FALSE;
			
				/* PWM DRIVER */
				BOOLEAN  [
					TRUE {
						ENUM [STOP, DIV1, DIV2, DIV4, DIV8, DIV64, DIV256, DIV1024] PWM_CHANNEL_C_0 = STOP;
						ENUM [STOP, DIV1, DIV2, DIV4, DIV8, DIV64, DIV256, DIV1024] PWM_CHANNEL_D_0 = STOP;
						ENUM [STOP, DIV1, DIV2, DIV4, DIV8, DIV64, DIV256, DIV1024] PWM_CHANNEL_E_0 = STOP;
						ENUM [STOP, DIV1, DIV2, DIV4, DIV8, DIV64, DIV256, DIV1024] PWM_CHANNEL_F_0 = STOP;
				
						ENUM [STOP, DIV1, DIV2, DIV4, DIV8, DIV64, DIV256, DIV1024] PWM_CHANNEL_C_1 = STOP : "Requires USE_TC_HW = TRUE.";
						ENUM [STOP, DIV1, DIV2, DIV4, DIV8, DIV64, DIV256, DIV1024] PWM_CHANNEL_D_1 = STOP : "Requires USE_TC_HW = TRUE.";
						ENUM [STOP, DIV1, DIV2, DIV4, DIV8, DIV64, DIV256, DIV1024] PWM_CHANNEL_E_1 = STOP : "Requires USE_TC_HW = TRUE.";
						ENUM [STOP, DIV1, DIV2, DIV4, DIV8, DIV64, DIV256, DIV1024] PWM_CHANNEL_F_1 = STOP : "Requires USE_TC_HW = TRUE.";
				
						ENUM [NONE, A, B, C, D] PWM_C_0_CC = NONE;
						ENUM [NONE, A, B, C, D] PWM_D_0_CC = NONE;
						ENUM [NONE, A, B, C, D] PWM_E_0_CC = NONE;
						ENUM [NONE, A, B, C, D] PWM_F_0_CC = NONE;
				
						ENUM [NONE, A, B] PWM_C_1_CC = NONE : "Requires USE_TC_HW = TRUE.";
						ENUM [NONE, A, B] PWM_D_1_CC = NONE : "Requires USE_TC_HW = TRUE.";
						ENUM [NONE, A, B] PWM_E_1_CC = NONE : "Requires USE_TC_HW = TRUE.";
						ENUM [NONE, A, B] PWM_F_1_CC = NONE : "Requires USE_TC_HW = TRUE.";

						ENUM [STANDARD, EXTENDED] PWM_STATUS = STANDARD;
						BOOLEAN PWM_GETSTATUS_API = FALSE;
						BOOLEAN PWM_DEINIT_API = FALSE;
						BOOLEAN PWM_ENABLENOTIF_API = FALSE;
						BOOLEAN PWM_DISABLENOTIF_API = FALSE;
						BOOLEAN PWM_SETDUTYCYCLE_API = FALSE;
						BOOLEAN PWM_GETOUTPUTSTATE_API = FALSE;
					}, FALSE
				] ENABLE_PWM_DRIVER = FALSE;


				/* RTC DRIVER */
				BOOLEAN  [
					TRUE {
						ENUM [STOP, DIV1, DIV2, DIV8, DIV16, DIV64, DIV256, DIV1024] RTC_CHANNEL_0 = STOP;
	
						ENUM [STANDARD, EXTENDED] RTC_STATUS = STANDARD;
						BOOLEAN RTC_GETSTATUS_API = FALSE;
						BOOLEAN RTC_DEINIT_API = FALSE;
						BOOLEAN RTC_ENABLENOTIF_API = FALSE;
						BOOLEAN RTC_DISABLENOTIF_API = FALSE;
						BOOLEAN RTC_STOP_API = FALSE;
						BOOLEAN RTC_GETCOUNTER_API = FALSE;
						BOOLEAN RTC_SETCOUNTER_API = FALSE;
					}, FALSE
				] ENABLE_RTC_DRIVER = FALSE;
			
				/* SCI DRIVER */
				BOOLEAN  [
					TRUE {
						ENUM [STANDARD, EXTENDED] SCI_STATUS = STANDARD;
						BOOLEAN SCI_BAUDRATE_TABLE = FALSE;
						BOOLEAN SCI_GETSTATUS_API = FALSE;
						BOOLEAN SCI_DEINIT_API = FALSE;
						BOOLEAN SCI_WRITETXDATA_API = FALSE;
						BOOLEAN SCI_WRITETXDATA__NTS = FALSE;
						BOOLEAN SCI_DISABLETX_API = FALSE;
						BOOLEAN SCI_ENABLETX_API = FALSE;
						BOOLEAN SCI_READRXDATA_API = FALSE;
						BOOLEAN SCI_READRXDATA_NTS = FALSE;
						BOOLEAN SCI_DISABLERX_API = FALSE;
						BOOLEAN SCI_ENABLERX_API = FALSE;
						BOOLEAN SCI_ENABLENOTIF_API = FALSE;
						BOOLEAN SCI_DISABLENOTIF_API = FALSE;
					}, FALSE
				] ENABLE_SCI_DRIVER = FALSE;
			},
			MEGA {
			
				ENUM [
					MEGA_328p
				] MODEL = MEGA_328p;

				BOOLEAN USEIC = FALSE;
				BOOLEAN USEUART = FALSE;
				BOOLEAN USESPI = FALSE;

				ENUM [STOP, DIV1, DIV8, DIV32, DIV64, DIV256, DIV1024] TIMER0 = STOP;
				ENUM [STOP, DIV1, DIV8,        DIV64, DIV256, DIV1024] TIMER1 = STOP;
				ENUM [STOP, DIV1, DIV8,        DIV64, DIV256, DIV1024] TIMER2 = STOP;
				ENUM [STOP, DIV1, DIV8,        DIV64, DIV256, DIV1024] TIMER3 = STOP;
			}
		] MCU_DATA;
    };
};

