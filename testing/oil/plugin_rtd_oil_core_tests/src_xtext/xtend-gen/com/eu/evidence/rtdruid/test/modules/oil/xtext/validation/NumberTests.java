package com.eu.evidence.rtdruid.test.modules.oil.xtext.validation;

import com.eu.evidence.rtdruid.test.modules.oil.xtext.OilInjectorProvider;
import com.eu.evidence.rtdruid.test.modules.oil.xtext.PackageProvider;
import org.eclipse.xtext.junit4.InjectWith;
import org.eclipse.xtext.xbase.lib.Functions.Function0;
import org.eclipselabs.xtext.utils.unittesting.FluentIssueCollection;
import org.eclipselabs.xtext.utils.unittesting.XtextRunner2;
import org.eclipselabs.xtext.utils.unittesting.XtextTest;
import org.junit.Test;
import org.junit.runner.RunWith;

@SuppressWarnings("all")
@RunWith(XtextRunner2.class)
@InjectWith(OilInjectorProvider.class)
public class NumberTests extends XtextTest {
  private static String path = new Function0<String>() {
    public String apply() {
      String _computeBundleClassPath = PackageProvider.DEFAULT.computeBundleClassPath(com.eu.evidence.rtdruid.test.modules.oil.xtext.validation.NumberTests.class);
      return _computeBundleClassPath;
    }
  }.apply();
  
  public NumberTests() {
    super(NumberTests.path);
  }
  
  @Test
  public void int32Test() {
      this.ignoreFormattingDifferences();
      this.testFile("testNumberInt32.oil");
      FluentIssueCollection _errorsOnly = this.issues.errorsOnly();
      FluentIssueCollection _inLine = _errorsOnly.inLine(19);
      FluentIssueCollection _under = _inLine.under(com.eu.evidence.rtdruid.oil.xtext.model.Parameter.class);
      FluentIssueCollection _oneOfThemContains = _under.oneOfThemContains("Expected a valid");
      FluentIssueCollection _oneOfThemContains_1 = _oneOfThemContains.oneOfThemContains("INT32");
      FluentIssueCollection _oneOfThemContains_2 = _oneOfThemContains_1.oneOfThemContains("1.0");
      this.assertConstraints(_oneOfThemContains_2);
      FluentIssueCollection _errorsOnly_1 = this.issues.errorsOnly();
      FluentIssueCollection _inLine_1 = _errorsOnly_1.inLine(20);
      FluentIssueCollection _under_1 = _inLine_1.under(com.eu.evidence.rtdruid.oil.xtext.model.Parameter.class);
      FluentIssueCollection _oneOfThemContains_3 = _under_1.oneOfThemContains("Expected a valid");
      FluentIssueCollection _oneOfThemContains_4 = _oneOfThemContains_3.oneOfThemContains("INT32");
      FluentIssueCollection _oneOfThemContains_5 = _oneOfThemContains_4.oneOfThemContains("-1.0");
      this.assertConstraints(_oneOfThemContains_5);
      FluentIssueCollection _errorsOnly_2 = this.issues.errorsOnly();
      FluentIssueCollection _inLine_2 = _errorsOnly_2.inLine(23);
      FluentIssueCollection _under_2 = _inLine_2.under(com.eu.evidence.rtdruid.oil.xtext.model.Parameter.class);
      FluentIssueCollection _oneOfThemContains_6 = _under_2.oneOfThemContains("Expected a valid");
      FluentIssueCollection _oneOfThemContains_7 = _oneOfThemContains_6.oneOfThemContains("INT32");
      FluentIssueCollection _oneOfThemContains_8 = _oneOfThemContains_7.oneOfThemContains("0xFFFFFFFFF");
      this.assertConstraints(_oneOfThemContains_8);
      FluentIssueCollection _errorsOnly_3 = this.issues.errorsOnly();
      FluentIssueCollection _inLine_3 = _errorsOnly_3.inLine(25);
      FluentIssueCollection _under_3 = _inLine_3.under(com.eu.evidence.rtdruid.oil.xtext.model.Parameter.class);
      FluentIssueCollection _oneOfThemContains_9 = _under_3.oneOfThemContains("does not support AUTO");
      this.assertConstraints(_oneOfThemContains_9);
  }
  
  @Test
  public void int64Test() {
      this.ignoreFormattingDifferences();
      this.testFile("testNumberInt64.oil");
      FluentIssueCollection _errorsOnly = this.issues.errorsOnly();
      FluentIssueCollection _inLine = _errorsOnly.inLine(19);
      FluentIssueCollection _under = _inLine.under(com.eu.evidence.rtdruid.oil.xtext.model.Parameter.class);
      FluentIssueCollection _oneOfThemContains = _under.oneOfThemContains("Expected a valid");
      FluentIssueCollection _oneOfThemContains_1 = _oneOfThemContains.oneOfThemContains("INT64");
      FluentIssueCollection _oneOfThemContains_2 = _oneOfThemContains_1.oneOfThemContains("1.0");
      this.assertConstraints(_oneOfThemContains_2);
      FluentIssueCollection _errorsOnly_1 = this.issues.errorsOnly();
      FluentIssueCollection _inLine_1 = _errorsOnly_1.inLine(20);
      FluentIssueCollection _under_1 = _inLine_1.under(com.eu.evidence.rtdruid.oil.xtext.model.Parameter.class);
      FluentIssueCollection _oneOfThemContains_3 = _under_1.oneOfThemContains("Expected a valid");
      FluentIssueCollection _oneOfThemContains_4 = _oneOfThemContains_3.oneOfThemContains("INT64");
      FluentIssueCollection _oneOfThemContains_5 = _oneOfThemContains_4.oneOfThemContains("-1.0");
      this.assertConstraints(_oneOfThemContains_5);
      FluentIssueCollection _errorsOnly_2 = this.issues.errorsOnly();
      FluentIssueCollection _inLine_2 = _errorsOnly_2.inLine(23);
      FluentIssueCollection _under_2 = _inLine_2.under(com.eu.evidence.rtdruid.oil.xtext.model.Parameter.class);
      FluentIssueCollection _oneOfThemContains_6 = _under_2.oneOfThemContains("Expected a valid");
      FluentIssueCollection _oneOfThemContains_7 = _oneOfThemContains_6.oneOfThemContains("INT64");
      FluentIssueCollection _oneOfThemContains_8 = _oneOfThemContains_7.oneOfThemContains("0xFFFFFFFFF");
      this.assertConstraints(_oneOfThemContains_8);
      FluentIssueCollection _errorsOnly_3 = this.issues.errorsOnly();
      FluentIssueCollection _inLine_3 = _errorsOnly_3.inLine(25);
      FluentIssueCollection _under_3 = _inLine_3.under(com.eu.evidence.rtdruid.oil.xtext.model.Parameter.class);
      FluentIssueCollection _oneOfThemContains_9 = _under_3.oneOfThemContains("does not support AUTO");
      this.assertConstraints(_oneOfThemContains_9);
  }
  
  @Test
  public void unit32Test() {
      this.ignoreFormattingDifferences();
      this.testFile("testNumberUInt32.oil");
      FluentIssueCollection _errorsOnly = this.issues.errorsOnly();
      FluentIssueCollection _inLine = _errorsOnly.inLine(18);
      FluentIssueCollection _under = _inLine.under(com.eu.evidence.rtdruid.oil.xtext.model.Parameter.class);
      FluentIssueCollection _oneOfThemContains = _under.oneOfThemContains("Expected a positive value");
      FluentIssueCollection _oneOfThemContains_1 = _oneOfThemContains.oneOfThemContains("-1");
      this.assertConstraints(_oneOfThemContains_1);
      FluentIssueCollection _errorsOnly_1 = this.issues.errorsOnly();
      FluentIssueCollection _inLine_1 = _errorsOnly_1.inLine(19);
      FluentIssueCollection _under_1 = _inLine_1.under(com.eu.evidence.rtdruid.oil.xtext.model.Parameter.class);
      FluentIssueCollection _oneOfThemContains_2 = _under_1.oneOfThemContains("Expected a valid");
      FluentIssueCollection _oneOfThemContains_3 = _oneOfThemContains_2.oneOfThemContains("UINT32");
      FluentIssueCollection _oneOfThemContains_4 = _oneOfThemContains_3.oneOfThemContains("1.0");
      this.assertConstraints(_oneOfThemContains_4);
      FluentIssueCollection _errorsOnly_2 = this.issues.errorsOnly();
      FluentIssueCollection _inLine_2 = _errorsOnly_2.inLine(20);
      FluentIssueCollection _under_2 = _inLine_2.under(com.eu.evidence.rtdruid.oil.xtext.model.Parameter.class);
      FluentIssueCollection _oneOfThemContains_5 = _under_2.oneOfThemContains("Expected a valid");
      FluentIssueCollection _oneOfThemContains_6 = _oneOfThemContains_5.oneOfThemContains("UINT32");
      FluentIssueCollection _oneOfThemContains_7 = _oneOfThemContains_6.oneOfThemContains("-1.0");
      this.assertConstraints(_oneOfThemContains_7);
      FluentIssueCollection _errorsOnly_3 = this.issues.errorsOnly();
      FluentIssueCollection _inLine_3 = _errorsOnly_3.inLine(22);
      FluentIssueCollection _under_3 = _inLine_3.under(com.eu.evidence.rtdruid.oil.xtext.model.Parameter.class);
      FluentIssueCollection _oneOfThemContains_8 = _under_3.oneOfThemContains("Expected a valid");
      FluentIssueCollection _oneOfThemContains_9 = _oneOfThemContains_8.oneOfThemContains("UINT32");
      FluentIssueCollection _oneOfThemContains_10 = _oneOfThemContains_9.oneOfThemContains("-0x1");
      this.assertConstraints(_oneOfThemContains_10);
      FluentIssueCollection _errorsOnly_4 = this.issues.errorsOnly();
      FluentIssueCollection _inLine_4 = _errorsOnly_4.inLine(23);
      FluentIssueCollection _under_4 = _inLine_4.under(com.eu.evidence.rtdruid.oil.xtext.model.Parameter.class);
      FluentIssueCollection _oneOfThemContains_11 = _under_4.oneOfThemContains("does not fit");
      FluentIssueCollection _oneOfThemContains_12 = _oneOfThemContains_11.oneOfThemContains("UINT32");
      FluentIssueCollection _oneOfThemContains_13 = _oneOfThemContains_12.oneOfThemContains("0xFFFFFFFFF");
      this.assertConstraints(_oneOfThemContains_13);
      FluentIssueCollection _errorsOnly_5 = this.issues.errorsOnly();
      FluentIssueCollection _inLine_5 = _errorsOnly_5.inLine(25);
      FluentIssueCollection _under_5 = _inLine_5.under(com.eu.evidence.rtdruid.oil.xtext.model.Parameter.class);
      FluentIssueCollection _oneOfThemContains_14 = _under_5.oneOfThemContains("does not support AUTO");
      this.assertConstraints(_oneOfThemContains_14);
  }
  
  @Test
  public void unit64Test() {
      this.ignoreFormattingDifferences();
      this.testFile("testNumberUInt64.oil");
      FluentIssueCollection _errorsOnly = this.issues.errorsOnly();
      FluentIssueCollection _inLine = _errorsOnly.inLine(18);
      FluentIssueCollection _under = _inLine.under(com.eu.evidence.rtdruid.oil.xtext.model.Parameter.class);
      FluentIssueCollection _oneOfThemContains = _under.oneOfThemContains("Expected a positive value");
      FluentIssueCollection _oneOfThemContains_1 = _oneOfThemContains.oneOfThemContains("-1");
      this.assertConstraints(_oneOfThemContains_1);
      FluentIssueCollection _errorsOnly_1 = this.issues.errorsOnly();
      FluentIssueCollection _inLine_1 = _errorsOnly_1.inLine(19);
      FluentIssueCollection _under_1 = _inLine_1.under(com.eu.evidence.rtdruid.oil.xtext.model.Parameter.class);
      FluentIssueCollection _oneOfThemContains_2 = _under_1.oneOfThemContains("Expected a valid");
      FluentIssueCollection _oneOfThemContains_3 = _oneOfThemContains_2.oneOfThemContains("UINT64");
      FluentIssueCollection _oneOfThemContains_4 = _oneOfThemContains_3.oneOfThemContains("1.0");
      this.assertConstraints(_oneOfThemContains_4);
      FluentIssueCollection _errorsOnly_2 = this.issues.errorsOnly();
      FluentIssueCollection _inLine_2 = _errorsOnly_2.inLine(20);
      FluentIssueCollection _under_2 = _inLine_2.under(com.eu.evidence.rtdruid.oil.xtext.model.Parameter.class);
      FluentIssueCollection _oneOfThemContains_5 = _under_2.oneOfThemContains("Expected a valid");
      FluentIssueCollection _oneOfThemContains_6 = _oneOfThemContains_5.oneOfThemContains("UINT64");
      FluentIssueCollection _oneOfThemContains_7 = _oneOfThemContains_6.oneOfThemContains("-1.0");
      this.assertConstraints(_oneOfThemContains_7);
      FluentIssueCollection _errorsOnly_3 = this.issues.errorsOnly();
      FluentIssueCollection _inLine_3 = _errorsOnly_3.inLine(22);
      FluentIssueCollection _under_3 = _inLine_3.under(com.eu.evidence.rtdruid.oil.xtext.model.Parameter.class);
      FluentIssueCollection _oneOfThemContains_8 = _under_3.oneOfThemContains("Expected a valid");
      FluentIssueCollection _oneOfThemContains_9 = _oneOfThemContains_8.oneOfThemContains("UINT64");
      FluentIssueCollection _oneOfThemContains_10 = _oneOfThemContains_9.oneOfThemContains("-0x1");
      this.assertConstraints(_oneOfThemContains_10);
      FluentIssueCollection _errorsOnly_4 = this.issues.errorsOnly();
      FluentIssueCollection _inLine_4 = _errorsOnly_4.inLine(23);
      FluentIssueCollection _under_4 = _inLine_4.under(com.eu.evidence.rtdruid.oil.xtext.model.Parameter.class);
      FluentIssueCollection _oneOfThemContains_11 = _under_4.oneOfThemContains("does not fit");
      FluentIssueCollection _oneOfThemContains_12 = _oneOfThemContains_11.oneOfThemContains("UINT64");
      FluentIssueCollection _oneOfThemContains_13 = _oneOfThemContains_12.oneOfThemContains("0xFFFFFFFFF");
      this.assertConstraints(_oneOfThemContains_13);
      FluentIssueCollection _errorsOnly_5 = this.issues.errorsOnly();
      FluentIssueCollection _inLine_5 = _errorsOnly_5.inLine(25);
      FluentIssueCollection _under_5 = _inLine_5.under(com.eu.evidence.rtdruid.oil.xtext.model.Parameter.class);
      FluentIssueCollection _oneOfThemContains_14 = _under_5.oneOfThemContains("does not support AUTO");
      this.assertConstraints(_oneOfThemContains_14);
  }
  
  @Test
  public void floatTest() {
      this.ignoreFormattingDifferences();
      this.testFile("testNumberFloat.oil");
      FluentIssueCollection _errorsOnly = this.issues.errorsOnly();
      FluentIssueCollection _inLine = _errorsOnly.inLine(20);
      FluentIssueCollection _under = _inLine.under(com.eu.evidence.rtdruid.oil.xtext.model.Parameter.class);
      FluentIssueCollection _oneOfThemContains = _under.oneOfThemContains("Expected a valid");
      FluentIssueCollection _oneOfThemContains_1 = _oneOfThemContains.oneOfThemContains("FLOAT");
      FluentIssueCollection _oneOfThemContains_2 = _oneOfThemContains_1.oneOfThemContains("0x1");
      this.assertConstraints(_oneOfThemContains_2);
      FluentIssueCollection _errorsOnly_1 = this.issues.errorsOnly();
      FluentIssueCollection _inLine_1 = _errorsOnly_1.inLine(21);
      FluentIssueCollection _under_1 = _inLine_1.under(com.eu.evidence.rtdruid.oil.xtext.model.Parameter.class);
      FluentIssueCollection _oneOfThemContains_3 = _under_1.oneOfThemContains("Expected a valid");
      FluentIssueCollection _oneOfThemContains_4 = _oneOfThemContains_3.oneOfThemContains("FLOAT");
      FluentIssueCollection _oneOfThemContains_5 = _oneOfThemContains_4.oneOfThemContains("0xFFFFFFFFF");
      this.assertConstraints(_oneOfThemContains_5);
      FluentIssueCollection _errorsOnly_2 = this.issues.errorsOnly();
      FluentIssueCollection _inLine_2 = _errorsOnly_2.inLine(22);
      FluentIssueCollection _under_2 = _inLine_2.under(com.eu.evidence.rtdruid.oil.xtext.model.Parameter.class);
      FluentIssueCollection _oneOfThemContains_6 = _under_2.oneOfThemContains("Expected a valid");
      FluentIssueCollection _oneOfThemContains_7 = _oneOfThemContains_6.oneOfThemContains("FLOAT");
      FluentIssueCollection _oneOfThemContains_8 = _oneOfThemContains_7.oneOfThemContains("0xAFFFFFF");
      this.assertConstraints(_oneOfThemContains_8);
      FluentIssueCollection _errorsOnly_3 = this.issues.errorsOnly();
      FluentIssueCollection _inLine_3 = _errorsOnly_3.inLine(23);
      FluentIssueCollection _under_3 = _inLine_3.under(com.eu.evidence.rtdruid.oil.xtext.model.Parameter.class);
      FluentIssueCollection _oneOfThemContains_9 = _under_3.oneOfThemContains("does not support AUTO");
      this.assertConstraints(_oneOfThemContains_9);
  }
  
  @Test
  public void doubleTest() {
      this.ignoreFormattingDifferences();
      this.testFile("testNumberDouble.oil");
      FluentIssueCollection _errorsOnly = this.issues.errorsOnly();
      FluentIssueCollection _inLine = _errorsOnly.inLine(20);
      FluentIssueCollection _under = _inLine.under(com.eu.evidence.rtdruid.oil.xtext.model.Parameter.class);
      FluentIssueCollection _oneOfThemContains = _under.oneOfThemContains("Expected a valid");
      FluentIssueCollection _oneOfThemContains_1 = _oneOfThemContains.oneOfThemContains("DOUBLE");
      FluentIssueCollection _oneOfThemContains_2 = _oneOfThemContains_1.oneOfThemContains("0x1");
      this.assertConstraints(_oneOfThemContains_2);
      FluentIssueCollection _errorsOnly_1 = this.issues.errorsOnly();
      FluentIssueCollection _inLine_1 = _errorsOnly_1.inLine(21);
      FluentIssueCollection _under_1 = _inLine_1.under(com.eu.evidence.rtdruid.oil.xtext.model.Parameter.class);
      FluentIssueCollection _oneOfThemContains_3 = _under_1.oneOfThemContains("Expected a valid");
      FluentIssueCollection _oneOfThemContains_4 = _oneOfThemContains_3.oneOfThemContains("DOUBLE");
      FluentIssueCollection _oneOfThemContains_5 = _oneOfThemContains_4.oneOfThemContains("0xFFFFFFFFF");
      this.assertConstraints(_oneOfThemContains_5);
      FluentIssueCollection _errorsOnly_2 = this.issues.errorsOnly();
      FluentIssueCollection _inLine_2 = _errorsOnly_2.inLine(22);
      FluentIssueCollection _under_2 = _inLine_2.under(com.eu.evidence.rtdruid.oil.xtext.model.Parameter.class);
      FluentIssueCollection _oneOfThemContains_6 = _under_2.oneOfThemContains("Expected a valid");
      FluentIssueCollection _oneOfThemContains_7 = _oneOfThemContains_6.oneOfThemContains("DOUBLE");
      FluentIssueCollection _oneOfThemContains_8 = _oneOfThemContains_7.oneOfThemContains("0xFFFFFF");
      this.assertConstraints(_oneOfThemContains_8);
      FluentIssueCollection _errorsOnly_3 = this.issues.errorsOnly();
      FluentIssueCollection _inLine_3 = _errorsOnly_3.inLine(23);
      FluentIssueCollection _under_3 = _inLine_3.under(com.eu.evidence.rtdruid.oil.xtext.model.Parameter.class);
      FluentIssueCollection _oneOfThemContains_9 = _under_3.oneOfThemContains("does not support AUTO");
      this.assertConstraints(_oneOfThemContains_9);
  }
  
  @Test
  public void composedNumberTest() {
      this.ignoreFormattingDifferences();
      this.testFile("testNumberComposed.oil");
      FluentIssueCollection _errorsOnly = this.issues.errorsOnly();
      FluentIssueCollection _inLine = _errorsOnly.inLine(22);
      FluentIssueCollection _under = _inLine.under(com.eu.evidence.rtdruid.oil.xtext.model.Parameter.class);
      FluentIssueCollection _oneOfThemContains = _under.oneOfThemContains("cannot contain sub-element");
      this.assertConstraints(_oneOfThemContains);
      FluentIssueCollection _errorsOnly_1 = this.issues.errorsOnly();
      FluentIssueCollection _inLine_1 = _errorsOnly_1.inLine(23);
      FluentIssueCollection _under_1 = _inLine_1.under(com.eu.evidence.rtdruid.oil.xtext.model.Parameter.class);
      FluentIssueCollection _oneOfThemContains_1 = _under_1.oneOfThemContains("cannot contain sub-element");
      this.assertConstraints(_oneOfThemContains_1);
      FluentIssueCollection _errorsOnly_2 = this.issues.errorsOnly();
      FluentIssueCollection _inLine_2 = _errorsOnly_2.inLine(24);
      FluentIssueCollection _under_2 = _inLine_2.under(com.eu.evidence.rtdruid.oil.xtext.model.Parameter.class);
      FluentIssueCollection _oneOfThemContains_2 = _under_2.oneOfThemContains("cannot contain sub-element");
      this.assertConstraints(_oneOfThemContains_2);
      FluentIssueCollection _errorsOnly_3 = this.issues.errorsOnly();
      FluentIssueCollection _inLine_3 = _errorsOnly_3.inLine(25);
      FluentIssueCollection _under_3 = _inLine_3.under(com.eu.evidence.rtdruid.oil.xtext.model.Parameter.class);
      FluentIssueCollection _oneOfThemContains_3 = _under_3.oneOfThemContains("cannot contain sub-element");
      this.assertConstraints(_oneOfThemContains_3);
      FluentIssueCollection _errorsOnly_4 = this.issues.errorsOnly();
      FluentIssueCollection _inLine_4 = _errorsOnly_4.inLine(26);
      FluentIssueCollection _under_4 = _inLine_4.under(com.eu.evidence.rtdruid.oil.xtext.model.Parameter.class);
      FluentIssueCollection _oneOfThemContains_4 = _under_4.oneOfThemContains("cannot contain sub-element");
      this.assertConstraints(_oneOfThemContains_4);
      FluentIssueCollection _errorsOnly_5 = this.issues.errorsOnly();
      FluentIssueCollection _inLine_5 = _errorsOnly_5.inLine(27);
      FluentIssueCollection _under_5 = _inLine_5.under(com.eu.evidence.rtdruid.oil.xtext.model.Parameter.class);
      FluentIssueCollection _oneOfThemContains_5 = _under_5.oneOfThemContains("cannot contain sub-element");
      this.assertConstraints(_oneOfThemContains_5);
      FluentIssueCollection _errorsOnly_6 = this.issues.errorsOnly();
      FluentIssueCollection _inLine_6 = _errorsOnly_6.inLine(29);
      FluentIssueCollection _under_6 = _inLine_6.under(com.eu.evidence.rtdruid.oil.xtext.model.Parameter.class);
      FluentIssueCollection _oneOfThemContains_6 = _under_6.oneOfThemContains("cannot contain sub-element");
      FluentIssueCollection _oneOfThemContains_7 = _oneOfThemContains_6.oneOfThemContains("set to AUTO");
      this.assertConstraints(_oneOfThemContains_7);
      FluentIssueCollection _errorsOnly_7 = this.issues.errorsOnly();
      FluentIssueCollection _inLine_7 = _errorsOnly_7.inLine(30);
      FluentIssueCollection _under_7 = _inLine_7.under(com.eu.evidence.rtdruid.oil.xtext.model.Parameter.class);
      FluentIssueCollection _oneOfThemContains_8 = _under_7.oneOfThemContains("cannot contain sub-element");
      FluentIssueCollection _oneOfThemContains_9 = _oneOfThemContains_8.oneOfThemContains("set to AUTO");
      this.assertConstraints(_oneOfThemContains_9);
      FluentIssueCollection _errorsOnly_8 = this.issues.errorsOnly();
      FluentIssueCollection _inLine_8 = _errorsOnly_8.inLine(31);
      FluentIssueCollection _under_8 = _inLine_8.under(com.eu.evidence.rtdruid.oil.xtext.model.Parameter.class);
      FluentIssueCollection _oneOfThemContains_10 = _under_8.oneOfThemContains("cannot contain sub-element");
      FluentIssueCollection _oneOfThemContains_11 = _oneOfThemContains_10.oneOfThemContains("set to AUTO");
      this.assertConstraints(_oneOfThemContains_11);
      FluentIssueCollection _errorsOnly_9 = this.issues.errorsOnly();
      FluentIssueCollection _inLine_9 = _errorsOnly_9.inLine(32);
      FluentIssueCollection _under_9 = _inLine_9.under(com.eu.evidence.rtdruid.oil.xtext.model.Parameter.class);
      FluentIssueCollection _oneOfThemContains_12 = _under_9.oneOfThemContains("cannot contain sub-element");
      FluentIssueCollection _oneOfThemContains_13 = _oneOfThemContains_12.oneOfThemContains("set to AUTO");
      this.assertConstraints(_oneOfThemContains_13);
      FluentIssueCollection _errorsOnly_10 = this.issues.errorsOnly();
      FluentIssueCollection _inLine_10 = _errorsOnly_10.inLine(33);
      FluentIssueCollection _under_10 = _inLine_10.under(com.eu.evidence.rtdruid.oil.xtext.model.Parameter.class);
      FluentIssueCollection _oneOfThemContains_14 = _under_10.oneOfThemContains("cannot contain sub-element");
      FluentIssueCollection _oneOfThemContains_15 = _oneOfThemContains_14.oneOfThemContains("set to AUTO");
      this.assertConstraints(_oneOfThemContains_15);
      FluentIssueCollection _errorsOnly_11 = this.issues.errorsOnly();
      FluentIssueCollection _inLine_11 = _errorsOnly_11.inLine(34);
      FluentIssueCollection _under_11 = _inLine_11.under(com.eu.evidence.rtdruid.oil.xtext.model.Parameter.class);
      FluentIssueCollection _oneOfThemContains_16 = _under_11.oneOfThemContains("cannot contain sub-element");
      FluentIssueCollection _oneOfThemContains_17 = _oneOfThemContains_16.oneOfThemContains("set to AUTO");
      this.assertConstraints(_oneOfThemContains_17);
  }
  
  @Test
  public void defaultNumberTest() {
      this.ignoreFormattingDifferences();
      this.testFile("testNumberDefault.oil");
      FluentIssueCollection _errorsOnly = this.issues.errorsOnly();
      FluentIssueCollection _inLine = _errorsOnly.inLine(7);
      FluentIssueCollection _under = _inLine.under(com.eu.evidence.rtdruid.oil.xtext.model.ValueType.class);
      FluentIssueCollection _oneOfThemContains = _under.oneOfThemContains("INT32");
      this.assertConstraints(_oneOfThemContains);
      FluentIssueCollection _errorsOnly_1 = this.issues.errorsOnly();
      FluentIssueCollection _inLine_1 = _errorsOnly_1.inLine(8);
      FluentIssueCollection _under_1 = _inLine_1.under(com.eu.evidence.rtdruid.oil.xtext.model.ValueType.class);
      FluentIssueCollection _oneOfThemContains_1 = _under_1.oneOfThemContains("INT32");
      this.assertConstraints(_oneOfThemContains_1);
      FluentIssueCollection _errorsOnly_2 = this.issues.errorsOnly();
      FluentIssueCollection _inLine_2 = _errorsOnly_2.inLine(11);
      FluentIssueCollection _under_2 = _inLine_2.under(com.eu.evidence.rtdruid.oil.xtext.model.ValueType.class);
      FluentIssueCollection _oneOfThemContains_2 = _under_2.oneOfThemContains("INT32");
      this.assertConstraints(_oneOfThemContains_2);
      FluentIssueCollection _errorsOnly_3 = this.issues.errorsOnly();
      FluentIssueCollection _inLine_3 = _errorsOnly_3.inLine(13);
      FluentIssueCollection _under_3 = _inLine_3.under(com.eu.evidence.rtdruid.oil.xtext.model.ValueType.class);
      FluentIssueCollection _oneOfThemContains_3 = _under_3.oneOfThemContains("AUTO");
      this.assertConstraints(_oneOfThemContains_3);
      FluentIssueCollection _errorsOnly_4 = this.issues.errorsOnly();
      FluentIssueCollection _inLine_4 = _errorsOnly_4.inLine(15);
      FluentIssueCollection _under_4 = _inLine_4.under(com.eu.evidence.rtdruid.oil.xtext.model.ValueType.class);
      FluentIssueCollection _oneOfThemContains_4 = _under_4.oneOfThemContains("INT32");
      this.assertConstraints(_oneOfThemContains_4);
      FluentIssueCollection _errorsOnly_5 = this.issues.errorsOnly();
      FluentIssueCollection _inLine_5 = _errorsOnly_5.inLine(16);
      FluentIssueCollection _under_5 = _inLine_5.under(com.eu.evidence.rtdruid.oil.xtext.model.ValueType.class);
      FluentIssueCollection _oneOfThemContains_5 = _under_5.oneOfThemContains("INT32");
      this.assertConstraints(_oneOfThemContains_5);
      FluentIssueCollection _errorsOnly_6 = this.issues.errorsOnly();
      FluentIssueCollection _inLine_6 = _errorsOnly_6.inLine(17);
      FluentIssueCollection _under_6 = _inLine_6.under(com.eu.evidence.rtdruid.oil.xtext.model.ValueType.class);
      FluentIssueCollection _oneOfThemContains_6 = _under_6.oneOfThemContains("INT32");
      this.assertConstraints(_oneOfThemContains_6);
      FluentIssueCollection _errorsOnly_7 = this.issues.errorsOnly();
      FluentIssueCollection _inLine_7 = _errorsOnly_7.inLine(21);
      FluentIssueCollection _under_7 = _inLine_7.under(com.eu.evidence.rtdruid.oil.xtext.model.ValueType.class);
      FluentIssueCollection _oneOfThemContains_7 = _under_7.oneOfThemContains("positive");
      this.assertConstraints(_oneOfThemContains_7);
      FluentIssueCollection _errorsOnly_8 = this.issues.errorsOnly();
      FluentIssueCollection _inLine_8 = _errorsOnly_8.inLine(22);
      FluentIssueCollection _under_8 = _inLine_8.under(com.eu.evidence.rtdruid.oil.xtext.model.ValueType.class);
      FluentIssueCollection _oneOfThemContains_8 = _under_8.oneOfThemContains("UINT32");
      this.assertConstraints(_oneOfThemContains_8);
      FluentIssueCollection _errorsOnly_9 = this.issues.errorsOnly();
      FluentIssueCollection _inLine_9 = _errorsOnly_9.inLine(23);
      FluentIssueCollection _under_9 = _inLine_9.under(com.eu.evidence.rtdruid.oil.xtext.model.ValueType.class);
      FluentIssueCollection _oneOfThemContains_9 = _under_9.oneOfThemContains("UINT32");
      this.assertConstraints(_oneOfThemContains_9);
      FluentIssueCollection _errorsOnly_10 = this.issues.errorsOnly();
      FluentIssueCollection _inLine_10 = _errorsOnly_10.inLine(25);
      FluentIssueCollection _under_10 = _inLine_10.under(com.eu.evidence.rtdruid.oil.xtext.model.ValueType.class);
      FluentIssueCollection _oneOfThemContains_10 = _under_10.oneOfThemContains("UINT32");
      this.assertConstraints(_oneOfThemContains_10);
      FluentIssueCollection _errorsOnly_11 = this.issues.errorsOnly();
      FluentIssueCollection _inLine_11 = _errorsOnly_11.inLine(26);
      FluentIssueCollection _under_11 = _inLine_11.under(com.eu.evidence.rtdruid.oil.xtext.model.ValueType.class);
      FluentIssueCollection _oneOfThemContains_11 = _under_11.oneOfThemContains("UINT32");
      this.assertConstraints(_oneOfThemContains_11);
      FluentIssueCollection _errorsOnly_12 = this.issues.errorsOnly();
      FluentIssueCollection _inLine_12 = _errorsOnly_12.inLine(28);
      FluentIssueCollection _under_12 = _inLine_12.under(com.eu.evidence.rtdruid.oil.xtext.model.ValueType.class);
      FluentIssueCollection _oneOfThemContains_12 = _under_12.oneOfThemContains("AUTO");
      this.assertConstraints(_oneOfThemContains_12);
      FluentIssueCollection _errorsOnly_13 = this.issues.errorsOnly();
      FluentIssueCollection _inLine_13 = _errorsOnly_13.inLine(30);
      FluentIssueCollection _under_13 = _inLine_13.under(com.eu.evidence.rtdruid.oil.xtext.model.ValueType.class);
      FluentIssueCollection _oneOfThemContains_13 = _under_13.oneOfThemContains("UINT32");
      this.assertConstraints(_oneOfThemContains_13);
      FluentIssueCollection _errorsOnly_14 = this.issues.errorsOnly();
      FluentIssueCollection _inLine_14 = _errorsOnly_14.inLine(31);
      FluentIssueCollection _under_14 = _inLine_14.under(com.eu.evidence.rtdruid.oil.xtext.model.ValueType.class);
      FluentIssueCollection _oneOfThemContains_14 = _under_14.oneOfThemContains("UINT32");
      this.assertConstraints(_oneOfThemContains_14);
      FluentIssueCollection _errorsOnly_15 = this.issues.errorsOnly();
      FluentIssueCollection _inLine_15 = _errorsOnly_15.inLine(32);
      FluentIssueCollection _under_15 = _inLine_15.under(com.eu.evidence.rtdruid.oil.xtext.model.ValueType.class);
      FluentIssueCollection _oneOfThemContains_15 = _under_15.oneOfThemContains("UINT32");
      this.assertConstraints(_oneOfThemContains_15);
      FluentIssueCollection _errorsOnly_16 = this.issues.errorsOnly();
      FluentIssueCollection _inLine_16 = _errorsOnly_16.inLine(37);
      FluentIssueCollection _under_16 = _inLine_16.under(com.eu.evidence.rtdruid.oil.xtext.model.ValueType.class);
      FluentIssueCollection _oneOfThemContains_16 = _under_16.oneOfThemContains("INT64");
      this.assertConstraints(_oneOfThemContains_16);
      FluentIssueCollection _errorsOnly_17 = this.issues.errorsOnly();
      FluentIssueCollection _inLine_17 = _errorsOnly_17.inLine(38);
      FluentIssueCollection _under_17 = _inLine_17.under(com.eu.evidence.rtdruid.oil.xtext.model.ValueType.class);
      FluentIssueCollection _oneOfThemContains_17 = _under_17.oneOfThemContains("INT64");
      this.assertConstraints(_oneOfThemContains_17);
      FluentIssueCollection _errorsOnly_18 = this.issues.errorsOnly();
      FluentIssueCollection _inLine_18 = _errorsOnly_18.inLine(43);
      FluentIssueCollection _under_18 = _inLine_18.under(com.eu.evidence.rtdruid.oil.xtext.model.ValueType.class);
      FluentIssueCollection _oneOfThemContains_18 = _under_18.oneOfThemContains("AUTO");
      this.assertConstraints(_oneOfThemContains_18);
      FluentIssueCollection _errorsOnly_19 = this.issues.errorsOnly();
      FluentIssueCollection _inLine_19 = _errorsOnly_19.inLine(45);
      FluentIssueCollection _under_19 = _inLine_19.under(com.eu.evidence.rtdruid.oil.xtext.model.ValueType.class);
      FluentIssueCollection _oneOfThemContains_19 = _under_19.oneOfThemContains("INT64");
      this.assertConstraints(_oneOfThemContains_19);
      FluentIssueCollection _errorsOnly_20 = this.issues.errorsOnly();
      FluentIssueCollection _inLine_20 = _errorsOnly_20.inLine(46);
      FluentIssueCollection _under_20 = _inLine_20.under(com.eu.evidence.rtdruid.oil.xtext.model.ValueType.class);
      FluentIssueCollection _oneOfThemContains_20 = _under_20.oneOfThemContains("INT64");
      this.assertConstraints(_oneOfThemContains_20);
      FluentIssueCollection _errorsOnly_21 = this.issues.errorsOnly();
      FluentIssueCollection _inLine_21 = _errorsOnly_21.inLine(47);
      FluentIssueCollection _under_21 = _inLine_21.under(com.eu.evidence.rtdruid.oil.xtext.model.ValueType.class);
      FluentIssueCollection _oneOfThemContains_21 = _under_21.oneOfThemContains("INT64");
      this.assertConstraints(_oneOfThemContains_21);
      FluentIssueCollection _errorsOnly_22 = this.issues.errorsOnly();
      FluentIssueCollection _inLine_22 = _errorsOnly_22.inLine(51);
      FluentIssueCollection _under_22 = _inLine_22.under(com.eu.evidence.rtdruid.oil.xtext.model.ValueType.class);
      FluentIssueCollection _oneOfThemContains_22 = _under_22.oneOfThemContains("positive");
      this.assertConstraints(_oneOfThemContains_22);
      FluentIssueCollection _errorsOnly_23 = this.issues.errorsOnly();
      FluentIssueCollection _inLine_23 = _errorsOnly_23.inLine(52);
      FluentIssueCollection _under_23 = _inLine_23.under(com.eu.evidence.rtdruid.oil.xtext.model.ValueType.class);
      FluentIssueCollection _oneOfThemContains_23 = _under_23.oneOfThemContains("UINT64");
      this.assertConstraints(_oneOfThemContains_23);
      FluentIssueCollection _errorsOnly_24 = this.issues.errorsOnly();
      FluentIssueCollection _inLine_24 = _errorsOnly_24.inLine(53);
      FluentIssueCollection _under_24 = _inLine_24.under(com.eu.evidence.rtdruid.oil.xtext.model.ValueType.class);
      FluentIssueCollection _oneOfThemContains_24 = _under_24.oneOfThemContains("UINT64");
      this.assertConstraints(_oneOfThemContains_24);
      FluentIssueCollection _errorsOnly_25 = this.issues.errorsOnly();
      FluentIssueCollection _inLine_25 = _errorsOnly_25.inLine(55);
      FluentIssueCollection _under_25 = _inLine_25.under(com.eu.evidence.rtdruid.oil.xtext.model.ValueType.class);
      FluentIssueCollection _oneOfThemContains_25 = _under_25.oneOfThemContains("UINT64");
      this.assertConstraints(_oneOfThemContains_25);
      FluentIssueCollection _errorsOnly_26 = this.issues.errorsOnly();
      FluentIssueCollection _inLine_26 = _errorsOnly_26.inLine(58);
      FluentIssueCollection _under_26 = _inLine_26.under(com.eu.evidence.rtdruid.oil.xtext.model.ValueType.class);
      FluentIssueCollection _oneOfThemContains_26 = _under_26.oneOfThemContains("AUTO");
      this.assertConstraints(_oneOfThemContains_26);
      FluentIssueCollection _errorsOnly_27 = this.issues.errorsOnly();
      FluentIssueCollection _inLine_27 = _errorsOnly_27.inLine(60);
      FluentIssueCollection _under_27 = _inLine_27.under(com.eu.evidence.rtdruid.oil.xtext.model.ValueType.class);
      FluentIssueCollection _oneOfThemContains_27 = _under_27.oneOfThemContains("UINT64");
      this.assertConstraints(_oneOfThemContains_27);
      FluentIssueCollection _errorsOnly_28 = this.issues.errorsOnly();
      FluentIssueCollection _inLine_28 = _errorsOnly_28.inLine(61);
      FluentIssueCollection _under_28 = _inLine_28.under(com.eu.evidence.rtdruid.oil.xtext.model.ValueType.class);
      FluentIssueCollection _oneOfThemContains_28 = _under_28.oneOfThemContains("UINT64");
      this.assertConstraints(_oneOfThemContains_28);
      FluentIssueCollection _errorsOnly_29 = this.issues.errorsOnly();
      FluentIssueCollection _inLine_29 = _errorsOnly_29.inLine(62);
      FluentIssueCollection _under_29 = _inLine_29.under(com.eu.evidence.rtdruid.oil.xtext.model.ValueType.class);
      FluentIssueCollection _oneOfThemContains_29 = _under_29.oneOfThemContains("UINT64");
      this.assertConstraints(_oneOfThemContains_29);
      FluentIssueCollection _errorsOnly_30 = this.issues.errorsOnly();
      FluentIssueCollection _inLine_30 = _errorsOnly_30.inLine(69);
      FluentIssueCollection _under_30 = _inLine_30.under(com.eu.evidence.rtdruid.oil.xtext.model.ValueType.class);
      FluentIssueCollection _oneOfThemContains_30 = _under_30.oneOfThemContains("FLOAT");
      this.assertConstraints(_oneOfThemContains_30);
      FluentIssueCollection _errorsOnly_31 = this.issues.errorsOnly();
      FluentIssueCollection _inLine_31 = _errorsOnly_31.inLine(70);
      FluentIssueCollection _under_31 = _inLine_31.under(com.eu.evidence.rtdruid.oil.xtext.model.ValueType.class);
      FluentIssueCollection _oneOfThemContains_31 = _under_31.oneOfThemContains("FLOAT");
      this.assertConstraints(_oneOfThemContains_31);
      FluentIssueCollection _errorsOnly_32 = this.issues.errorsOnly();
      FluentIssueCollection _inLine_32 = _errorsOnly_32.inLine(71);
      FluentIssueCollection _under_32 = _inLine_32.under(com.eu.evidence.rtdruid.oil.xtext.model.ValueType.class);
      FluentIssueCollection _oneOfThemContains_32 = _under_32.oneOfThemContains("FLOAT");
      this.assertConstraints(_oneOfThemContains_32);
      FluentIssueCollection _errorsOnly_33 = this.issues.errorsOnly();
      FluentIssueCollection _inLine_33 = _errorsOnly_33.inLine(72);
      FluentIssueCollection _under_33 = _inLine_33.under(com.eu.evidence.rtdruid.oil.xtext.model.ValueType.class);
      FluentIssueCollection _oneOfThemContains_33 = _under_33.oneOfThemContains("FLOAT");
      this.assertConstraints(_oneOfThemContains_33);
      FluentIssueCollection _errorsOnly_34 = this.issues.errorsOnly();
      FluentIssueCollection _inLine_34 = _errorsOnly_34.inLine(73);
      FluentIssueCollection _under_34 = _inLine_34.under(com.eu.evidence.rtdruid.oil.xtext.model.ValueType.class);
      FluentIssueCollection _oneOfThemContains_34 = _under_34.oneOfThemContains("AUTO");
      this.assertConstraints(_oneOfThemContains_34);
      FluentIssueCollection _errorsOnly_35 = this.issues.errorsOnly();
      FluentIssueCollection _inLine_35 = _errorsOnly_35.inLine(75);
      FluentIssueCollection _under_35 = _inLine_35.under(com.eu.evidence.rtdruid.oil.xtext.model.ValueType.class);
      FluentIssueCollection _oneOfThemContains_35 = _under_35.oneOfThemContains("FLOAT");
      this.assertConstraints(_oneOfThemContains_35);
      FluentIssueCollection _errorsOnly_36 = this.issues.errorsOnly();
      FluentIssueCollection _inLine_36 = _errorsOnly_36.inLine(76);
      FluentIssueCollection _under_36 = _inLine_36.under(com.eu.evidence.rtdruid.oil.xtext.model.ValueType.class);
      FluentIssueCollection _oneOfThemContains_36 = _under_36.oneOfThemContains("FLOAT");
      this.assertConstraints(_oneOfThemContains_36);
      FluentIssueCollection _errorsOnly_37 = this.issues.errorsOnly();
      FluentIssueCollection _inLine_37 = _errorsOnly_37.inLine(77);
      FluentIssueCollection _under_37 = _inLine_37.under(com.eu.evidence.rtdruid.oil.xtext.model.ValueType.class);
      FluentIssueCollection _oneOfThemContains_37 = _under_37.oneOfThemContains("FLOAT");
      this.assertConstraints(_oneOfThemContains_37);
      FluentIssueCollection _errorsOnly_38 = this.issues.errorsOnly();
      FluentIssueCollection _inLine_38 = _errorsOnly_38.inLine(84);
      FluentIssueCollection _under_38 = _inLine_38.under(com.eu.evidence.rtdruid.oil.xtext.model.ValueType.class);
      FluentIssueCollection _oneOfThemContains_38 = _under_38.oneOfThemContains("DOUBLE");
      this.assertConstraints(_oneOfThemContains_38);
      FluentIssueCollection _errorsOnly_39 = this.issues.errorsOnly();
      FluentIssueCollection _inLine_39 = _errorsOnly_39.inLine(85);
      FluentIssueCollection _under_39 = _inLine_39.under(com.eu.evidence.rtdruid.oil.xtext.model.ValueType.class);
      FluentIssueCollection _oneOfThemContains_39 = _under_39.oneOfThemContains("DOUBLE");
      this.assertConstraints(_oneOfThemContains_39);
      FluentIssueCollection _errorsOnly_40 = this.issues.errorsOnly();
      FluentIssueCollection _inLine_40 = _errorsOnly_40.inLine(86);
      FluentIssueCollection _under_40 = _inLine_40.under(com.eu.evidence.rtdruid.oil.xtext.model.ValueType.class);
      FluentIssueCollection _oneOfThemContains_40 = _under_40.oneOfThemContains("DOUBLE");
      this.assertConstraints(_oneOfThemContains_40);
      FluentIssueCollection _errorsOnly_41 = this.issues.errorsOnly();
      FluentIssueCollection _inLine_41 = _errorsOnly_41.inLine(87);
      FluentIssueCollection _under_41 = _inLine_41.under(com.eu.evidence.rtdruid.oil.xtext.model.ValueType.class);
      FluentIssueCollection _oneOfThemContains_41 = _under_41.oneOfThemContains("DOUBLE");
      this.assertConstraints(_oneOfThemContains_41);
      FluentIssueCollection _errorsOnly_42 = this.issues.errorsOnly();
      FluentIssueCollection _inLine_42 = _errorsOnly_42.inLine(88);
      FluentIssueCollection _under_42 = _inLine_42.under(com.eu.evidence.rtdruid.oil.xtext.model.ValueType.class);
      FluentIssueCollection _oneOfThemContains_42 = _under_42.oneOfThemContains("AUTO");
      this.assertConstraints(_oneOfThemContains_42);
      FluentIssueCollection _errorsOnly_43 = this.issues.errorsOnly();
      FluentIssueCollection _inLine_43 = _errorsOnly_43.inLine(90);
      FluentIssueCollection _under_43 = _inLine_43.under(com.eu.evidence.rtdruid.oil.xtext.model.ValueType.class);
      FluentIssueCollection _oneOfThemContains_43 = _under_43.oneOfThemContains("DOUBLE");
      this.assertConstraints(_oneOfThemContains_43);
      FluentIssueCollection _errorsOnly_44 = this.issues.errorsOnly();
      FluentIssueCollection _inLine_44 = _errorsOnly_44.inLine(91);
      FluentIssueCollection _under_44 = _inLine_44.under(com.eu.evidence.rtdruid.oil.xtext.model.ValueType.class);
      FluentIssueCollection _oneOfThemContains_44 = _under_44.oneOfThemContains("DOUBLE");
      this.assertConstraints(_oneOfThemContains_44);
      FluentIssueCollection _errorsOnly_45 = this.issues.errorsOnly();
      FluentIssueCollection _inLine_45 = _errorsOnly_45.inLine(92);
      FluentIssueCollection _under_45 = _inLine_45.under(com.eu.evidence.rtdruid.oil.xtext.model.ValueType.class);
      FluentIssueCollection _oneOfThemContains_45 = _under_45.oneOfThemContains("DOUBLE");
      this.assertConstraints(_oneOfThemContains_45);
  }
}
